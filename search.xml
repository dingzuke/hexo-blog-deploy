<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title> docker常用操作和配置</title>
      <link href="/docker-chang-yong-ming-ling-cao-zuo.html"/>
      <url>/docker-chang-yong-ming-ling-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<p>docker相关安装见 <a href="http://www.ding51.cn/liunx-chang-jian-zhi-ling-nginx-docker-deng.html">http://www.ding51.cn/liunx-chang-jian-zhi-ling-nginx-docker-deng.html</a>  本文主要介绍我日常开发中用到的命令和相关配置。</p><h5 id="1、镜像"><a href="#1、镜像" class="headerlink" title="1、镜像"></a>1、镜像</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查看所有镜像</span>docker images <span class="token comment" spellcheck="true">// 删除镜像(前提是该镜像没在容器中运行，否则需要删除运行的容器)</span>docker rmi 镜像名<span class="token punctuation">:</span>tag 或 id</code></pre><h5 id="2、容器"><a href="#2、容器" class="headerlink" title="2、容器"></a>2、容器</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 列出运行容器</span>docker ps<span class="token comment" spellcheck="true">// 查看所有容器，包括关闭的</span>docker ps <span class="token operator">-</span>a<span class="token comment" spellcheck="true">// 进入docker容器</span>sudo docker exec <span class="token operator">-</span>it 665b4a1e17b6  <span class="token operator">/</span>bin<span class="token operator">/</span>bash    #by ID<span class="token comment" spellcheck="true">// 停止运行的容器</span>docker stop 容器id <span class="token comment" spellcheck="true">// 删除容器（需要停止容器）</span>docker rm 容器id</code></pre><h5 id="3、docker-登录"><a href="#3、docker-登录" class="headerlink" title="3、docker 登录"></a>3、docker 登录</h5><pre><code>docker login</code></pre><h5 id="4、本地创建镜像"><a href="#4、本地创建镜像" class="headerlink" title="4、本地创建镜像"></a>4、本地创建镜像</h5><pre class=" language-bash"><code class="language-bash">// 创建一个 test_fe ，tag为v1.0的镜像 注意加上 <span class="token keyword">.</span>docker build -t test_fe:v1.0 <span class="token keyword">.</span>docker tag test_fe:v1.0 路径/test_fe:v1.0// 提交上传docker push 路径/test_fe:v1.0</code></pre><p>注意：后面要加<code>.</code>表示当前目录下的Dockerfile 构建。<br>以下是我在前端构建时Dockerfile的文件，参考：</p><pre><code># Base images 基础镜像FROM alpine:3.9#MAINTAINER 维护者信息LABEL maintainer=&quot;dzk&quot;# 设置镜像仓库地址RUN  echo http://mirrors.aliyun.com/alpine/v3.9/main &gt; /etc/apk/repositories; \     echo http://mirrors.aliyun.com/alpine/v3.9/community &gt;&gt; /etc/apk/repositoriesRUN apk --update --no-cache add nginx &amp;&amp; mkdir /run/nginx/ &amp;&amp; mkdir -p /var/www/html \    &amp;&amp; rm -rf /var/cache/apk/* \    &amp;&amp; rm -rf /root/.cache \    &amp;&amp; rm -rf /tmp/*#COPY 需要准备Nginx的配置nginx.confCOPY ./dist/ /var/www/htmlCOPY ./nginx.conf /etc/nginx#EXPOSE 映射端口EXPOSE 80#CMD 运行以下命令CMD [&quot;/usr/sbin/nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></pre><h5 id="5、docker-镜像导入导出"><a href="#5、docker-镜像导入导出" class="headerlink" title="5、docker 镜像导入导出"></a>5、docker 镜像导入导出</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 本地打包镜像：</span>docker save -o xxx.tar  镜像名1:Tag版本   镜像名2:Tag版本 <span class="token comment" spellcheck="true">#本地导入镜像： </span>docker load -i xxx.tar</code></pre><h5 id="6、下载运行镜像"><a href="#6、下载运行镜像" class="headerlink" title="6、下载运行镜像"></a>6、下载运行镜像</h5><p>示例：</p><pre><code>// 下载镜像： portainerdocker pull portainer/portainer// 启动：portainerdocker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer  portainer/portainer</code></pre><h5 id="7、拷贝容器内容出来修改、将修改的导入到镜像"><a href="#7、拷贝容器内容出来修改、将修改的导入到镜像" class="headerlink" title="7、拷贝容器内容出来修改、将修改的导入到镜像"></a>7、拷贝容器内容出来修改、将修改的导入到镜像</h5><pre class=" language-bash"><code class="language-bash">// 修改device容器中的/srv/server/test.pydocker <span class="token function">cp</span> device:/srv/server/test.py <span class="token keyword">.</span>docker <span class="token function">cp</span> device:/srv/server/test.pydocker commit 容器名 镜像:tagdocker-compose down 后重启docker-compose up -d</code></pre><h5 id="8、docker-compose"><a href="#8、docker-compose" class="headerlink" title="8、docker-compose"></a>8、docker-compose</h5><pre><code>// 拉取构建  docker-compose up -d// 停止 docker-compose down</code></pre><p>docker-compose.yml文件基本配置，mysql、前端、phpadmin 为例：</p><pre class=" language-bash"><code class="language-bash">version: <span class="token string">"3"</span>services:  mysql:    image: mysql:5.6.45    container_name: mysql    ports:      - 3306:3306    environment:      MYSQL_ROOT_PASSWORD: root      MYSQL_DATABASE: xxx    volumes:      - /data/mysql:/var/lib/mysql      - ./sql/:/docker-entrypoint-initdb.d/    restart: always  protal:    image: registry.xxx.com/xxx/test_fe:prod    container_name: protal    ports:      - 8000:80    restart: always  phpmyadmin:    image: phpmyadmin/phpmyadmin    container_name: phpmyadmin    environment:      - PMA_HOST<span class="token operator">=</span>mysql      - PMA_PORT<span class="token operator">=</span>3306    ports:      - 10000:80    depends_on:      - mysql</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/linux-chang-yong-ming-ling.html"/>
      <url>/linux-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="1-目录查看-ls-al"><a href="#1-目录查看-ls-al" class="headerlink" title="1.目录查看 ls [-al]"></a>1.目录查看 ls [-al]</h4><p>命令：ls [-al]</p><pre><code>ls                查看当前目录下的所有目录和文件ls -a            查看当前目录下的所有目录和文件（包括隐藏的文件）ls -l 或 ll       列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）</code></pre><h4 id="2-文件夹操作【增-mkdir，删-rm，改-mv，查-find】"><a href="#2-文件夹操作【增-mkdir，删-rm，改-mv，查-find】" class="headerlink" title="2.文件夹操作【增-mkdir，删-rm，改-mv，查-find】"></a>2.文件夹操作【增-mkdir，删-rm，改-mv，查-find】</h4><h5 id="2-1-创建文件夹【增】-mkdir"><a href="#2-1-创建文件夹【增】-mkdir" class="headerlink" title="2.1 创建文件夹【增】 mkdir"></a>2.1 创建文件夹【增】 mkdir</h5><p>命令：mkdir 目录</p><pre><code>mkdir    aaa            在当前目录下创建一个名为aaa的目录mkdir    /usr/aaa    在指定目录下创建一个名为aaa的目录</code></pre><h5 id="2-2-删除目录或文件夹【删】rm"><a href="#2-2-删除目录或文件夹【删】rm" class="headerlink" title="2.2 删除目录或文件夹【删】rm"></a>2.2 删除目录或文件夹【删】rm</h5><p>命令：rm [-rf] 目录</p><pre><code>删除文件：rm 文件        删除当前目录下的文件rm -f 文件    删除当前目录的的文件（不询问）删除目录：rm -r aaa    递归删除当前目录下的aaa目录rm -rf aaa    递归删除当前目录下的aaa目录（不询问）</code></pre><h5 id="2-3-文件夹修改【改】mv-和-cp"><a href="#2-3-文件夹修改【改】mv-和-cp" class="headerlink" title="2.3 文件夹修改【改】mv 和 cp"></a>2.3 文件夹修改【改】mv 和 cp</h5><pre><code>一、重命名目录    命令：mv 当前目录  新目录    例如：mv aaa bbb    将目录aaa改为bbb二、剪切目录    命令：mv 目录名称 目录的新位置    示例：将/usr/tmp目录下的aaa目录剪切到 /usr目录下面     mv /usr/tmp/aaa /usr    注意：mv语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作三、拷贝目录    命令：cp -r 目录名称 目录拷贝的目标位置   -r代表递归    示例：将/usr/tmp目录下的aaa目录复制到 /usr目录下面     cp /usr/tmp/aaa  /usr</code></pre><h5 id="2-4-搜索目录【查】find"><a href="#2-4-搜索目录【查】find" class="headerlink" title="2.4 搜索目录【查】find"></a>2.4 搜索目录【查】find</h5><p>命令：find 目录 参数 文件名称<br>示例：find /usr/tmp -name ‘a*’    查找/usr/tmp目录下的所有以a开头的目录或文件</p><h4 id="3-文件操作【增-touch，删-rm，改-vim，查-cat】"><a href="#3-文件操作【增-touch，删-rm，改-vim，查-cat】" class="headerlink" title="3. 文件操作【增-touch，删-rm，改-vim，查-cat】"></a>3. 文件操作【增-touch，删-rm，改-vim，查-cat】</h4><h5 id="3-1-新建文件【增】touch"><a href="#3-1-新建文件【增】touch" class="headerlink" title="3.1 新建文件【增】touch"></a>3.1 新建文件【增】touch</h5><p>命令：touch 文件名</p><p>示例：在当前目录创建一个名为aa.txt的文件        touch  aa.txt</p><h5 id="3-2-删除文件-【删】-rm"><a href="#3-2-删除文件-【删】-rm" class="headerlink" title="3.2 删除文件 【删】 rm"></a>3.2 删除文件 【删】 rm</h5><p>命令：rm -rf 文件名</p><h5 id="3-3-修改文件【改】-vi或vim"><a href="#3-3-修改文件【改】-vi或vim" class="headerlink" title="3.3 修改文件【改】 vi或vim"></a>3.3 修改文件【改】 vi或vim</h5><p>命令： vim 文件名</p><p>1) 命令行模式command mode）<br>      命令行模式下的常用命令：<br>      【1】控制光标移动：↑，↓，j<br>      【2】删除当前行：dd<br>      【3】查找：/字符<br>      【4】进入编辑模式：i o a<br>      【5】进入底行模式：:</p><p>2) 编辑模式（Insert mode）<br>      按 i进入<br>     【1】ESC 退出编辑模式到命令行模式；</p><p>3) 底行模式（last line mode）<br>     【1】退出编辑：   :q<br>     【2】强制退出：   :q!<br>     【3】保存并退出：  :wq</p><h5 id="3-4-文件的查看【查】"><a href="#3-4-文件的查看【查】" class="headerlink" title="3.4 文件的查看【查】"></a>3.4 文件的查看【查】</h5><h6 id="cat：看最后一屏"><a href="#cat：看最后一屏" class="headerlink" title="cat：看最后一屏"></a>cat：看最后一屏</h6><p>示例：使用cat查看/etc/sudo.conf文件，只能显示最后一屏内容<br>cat sudo.conf</p><h6 id="more：百分比显示"><a href="#more：百分比显示" class="headerlink" title="more：百分比显示"></a>more：百分比显示</h6><p>示例：使用more查看/etc/sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看<br>more sudo.conf</p><h6 id="less：翻页查看"><a href="#less：翻页查看" class="headerlink" title="less：翻页查看"></a>less：翻页查看</h6><p>示例：使用less查看/etc/sudo.conf文件，可以使用键盘上的PgUp和PgDn向上    和向下翻页，q结束查看<br>less sudo.conf</p><h6 id="tail：指定行数或者动态查看"><a href="#tail：指定行数或者动态查看" class="headerlink" title="tail：指定行数或者动态查看"></a>tail：指定行数或者动态查看</h6><p>示例：使用tail -10 查看/etc/sudo.conf文件的后10行，Ctrl+C结束<br>tail -10 sudo.conf</p><h4 id="4-权限修改"><a href="#4-权限修改" class="headerlink" title="4. 权限修改"></a>4. 权限修改</h4><pre><code>chmod +x aaa.txtchmod 777 aaa.txtchmod -R 777 aaa  // 所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)chmod rwx aaa.txt</code></pre><h4 id="5-打包解压"><a href="#5-打包解压" class="headerlink" title="5. 打包解压"></a>5. 打包解压</h4><h5 id="5-1-打包命令：tar-zcvf-打包压缩后的文件名-tar-要打包的文件"><a href="#5-1-打包命令：tar-zcvf-打包压缩后的文件名-tar-要打包的文件" class="headerlink" title="5.1 打包命令：tar -zcvf 打包压缩后的文件名.tar  要打包的文件"></a>5.1 打包命令：tar -zcvf 打包压缩后的文件名.tar  要打包的文件</h5><h5 id="5-2-解压命令：-tar-xvf-ab-tar"><a href="#5-2-解压命令：-tar-xvf-ab-tar" class="headerlink" title="5.2 解压命令： tar -xvf ab.tar"></a>5.2 解压命令： tar -xvf ab.tar</h5><h4 id="6-查找命令"><a href="#6-查找命令" class="headerlink" title="6. 查找命令"></a>6. 查找命令</h4><h5 id="6-1-grep"><a href="#6-1-grep" class="headerlink" title="6.1 grep"></a>6.1 grep</h5><p>grep命令是一种强大的文本搜索工具</p><pre><code>ps -ef | grep sshd  查找指定ssh服务进程 ps -ef | grep sshd | grep -v grep 查找指定服务进程，排除gerp身 ps -ef | grep sshd -c 查找指定进程个数 </code></pre><h5 id="6-2-find"><a href="#6-2-find" class="headerlink" title="6.2 find"></a>6.2 find</h5><p>find命令在目录结构中搜索文件，并对搜索结果执行指定的操作。 </p><pre><code>find . -name &quot;*.log&quot; -ls  在当前目录查找以.log结尾的文件，并显示详细信息。 find /root/ -perm 600   查找/root/目录下权限为600的文件 find . -type f -name &quot;*.log&quot;  查找当目录，以.log结尾的普通文件 find . -type d | sort   查找当前所有目录并排序 find . -size +100M  查找当前目录大于100M的文件</code></pre><h5 id="6-3-whereis"><a href="#6-3-whereis" class="headerlink" title="6.3 whereis"></a>6.3 whereis</h5><p>whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。</p><pre><code>whereis nginx    将和nginx文件相关的文件都查找出来</code></pre><h5 id="6-4-which"><a href="#6-4-which" class="headerlink" title="6.4 which"></a>6.4 which</h5><p>which命令的作用是在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><pre><code>which docker  查找docker命令所在路径 which java  查找path中java的路径</code></pre><h4 id="7-su、sudo"><a href="#7-su、sudo" class="headerlink" title="7. su、sudo"></a>7. su、sudo</h4><h5 id="7-1-su"><a href="#7-1-su" class="headerlink" title="7.1 su"></a>7.1 su</h5><p>su用于用户之间的切换。但是切换前的用户依然保持登录状态。如果是root 向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。</p><pre><code>su test:切换到test用户，但是路径还是/root目录su - test : 切换到test用户，路径变成了/home/testsu : 切换到root用户，但是路径还是原来的路径su - : 切换到root用户，并且路径是/rootsu不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。退出返回之前的用户：exit</code></pre><h5 id="7-2-sudo"><a href="#7-2-sudo" class="headerlink" title="7.2 sudo"></a>7.2 sudo</h5><p>sudo是为所有想使用root权限的普通用户设计的。可以让普通用户具有临时使用root权限的权利。只需输入自己账户的密码即可。</p><h4 id="8-系统服务"><a href="#8-系统服务" class="headerlink" title="8. 系统服务"></a>8. 系统服务</h4><pre><code>service nginx status  --查看nginx服务的状态service nginx start  --开启nginx服务service nginx stop  --停止nginx服务service nginx restart  --重启nginx服务chkconfig nginx off  --关闭nginx服务的开机自启动chkconfig nginx on  --开启nginx服务的开机自启动</code></pre><h4 id="9-定时任务指令crontab-配置"><a href="#9-定时任务指令crontab-配置" class="headerlink" title="9. 定时任务指令crontab 配置"></a>9. 定时任务指令crontab 配置</h4><pre><code>安装yum install crontabs服务操作说明：service crond start   ## 启动服务 service crond stop    ## 关闭服务 service crond restart ## 重启服务</code></pre><p>配置说明、实例<br>命令：<code>*   *    *   *   *   command</code></p><p>解释：<code>分  时  日  月  周  命令</code></p><p>第1列表示分钟1～59 每分钟用<em>或者 </em>/1表示    </p><p>第2列表示小时0～23（0表示0点）</p><p>第3列表示日期1～31  </p><p>第4列表示月份1～12  </p><p>第5列标识号星期0～6（0表示星期天）  </p><p>第6列要运行的命令</p><p>配置实例：</p><pre><code>先打开定时任务所在的文件：crontab -e每分钟执行一次date命令 */1 * * * * date &gt;&gt; /root/date.txt每晚的21:30重启apache。 30 21 * * * service httpd restart每月1、10、22日的4 : 45重启apache。  45 4 1,10,22 * * service httpd restart每周六、周日的1 : 10重启apache。 10 1 * * 6,0 service httpd restart每天18 : 00至23 : 00之间每隔30分钟重启apache。0,30   18-23    *   *   *   service httpd restart晚上11点到早上7点之间，每隔一小时重启apache*  23-7/1    *   *   *   service httpd restart</code></pre><h4 id="10-其他命令"><a href="#10-其他命令" class="headerlink" title="10. 其他命令"></a>10. 其他命令</h4><h5 id="10-1-查看当前目录：pwd"><a href="#10-1-查看当前目录：pwd" class="headerlink" title="10.1 查看当前目录：pwd"></a>10.1 查看当前目录：pwd</h5><pre><code>命令：pwd     查看当前目录路径</code></pre><h5 id="10-2-查看进程：ps-ef"><a href="#10-2-查看进程：ps-ef" class="headerlink" title="10.2 查看进程：ps -ef"></a>10.2 查看进程：ps -ef</h5><p>命令：ps -ef    查看所有正在运行的进程</p><h6 id="10-3-结束进程：kill"><a href="#10-3-结束进程：kill" class="headerlink" title="10.3 结束进程：kill"></a>10.3 结束进程：kill</h6><pre><code>命令：kill pid 或者 kill -9 pid(强制杀死进程)           pid:进程号</code></pre><h5 id="10-4-网络通信命令："><a href="#10-4-网络通信命令：" class="headerlink" title="10.4 网络通信命令："></a>10.4 网络通信命令：</h5><p>ifconfig：查看网卡信息</p><pre><code>命令：ifconfig 或 ifconfig | more</code></pre><p>ping：查看与某台机器的连接情况</p><pre><code>命令：ping ip</code></pre><p>netstat -an：查看当前系统端口</p><pre><code>命令：netstat -an</code></pre><p>搜索指定端口</p><pre><code>命令：netstat -an | grep 8080</code></pre><h5 id="10-5-关闭防火墙"><a href="#10-5-关闭防火墙" class="headerlink" title="10.5 关闭防火墙"></a>10.5 关闭防火墙</h5><pre><code>命令：chkconfig iptables off或者： iptables -L; iptables -F; service iptables stop</code></pre><h6 id="10-6-清屏"><a href="#10-6-清屏" class="headerlink" title="10.6 清屏"></a>10.6 清屏</h6><pre><code>命令：clear</code></pre><h6 id="10-7-vi模式下快捷键"><a href="#10-7-vi模式下快捷键" class="headerlink" title="10.7 vi模式下快捷键"></a>10.7 vi模式下快捷键</h6><pre><code>esc后:保存并退出快捷键：shift+z+z光标跳到最后一行快捷键：shift+g删除一行：dd复制一行内容：y+y粘贴复制的内容：p</code></pre><h6 id="10-8-显卡查看"><a href="#10-8-显卡查看" class="headerlink" title="10.8 显卡查看"></a>10.8 显卡查看</h6><pre><code>nvidia-smi</code></pre><h6 id="10-9-查看存储"><a href="#10-9-查看存储" class="headerlink" title="10.9 查看存储"></a>10.9 查看存储</h6><pre><code>df</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu系统Nginx、Docker等安装</title>
      <link href="/liunx-chang-jian-zhi-ling-nginx-docker-deng.html"/>
      <url>/liunx-chang-jian-zhi-ling-nginx-docker-deng.html</url>
      
        <content type="html"><![CDATA[<p>主要介绍 基于ubuntu系统下的 Nginx，docker，node，jenkins安装</p><h3 id="1、Nginx-安装及使用"><a href="#1、Nginx-安装及使用" class="headerlink" title="1、Nginx 安装及使用"></a>1、Nginx 安装及使用</h3><pre class=" language-bash"><code class="language-bash">// 安装<span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> nginxnginx -v// 相关命令<span class="token function">service</span> nginx start<span class="token function">service</span> nginx stop<span class="token function">service</span> nginx restart<span class="token function">sudo</span> systemctl restart nginx</code></pre><p>nginx.conf 文件，路径为：/etc/nginx/nginx.conf</p><p>default 服务主机配置文件，路径为：/etc/nginx/sites-available/default</p><p>默认页面     /var/www/html   </p><p>常见的web服务配置:</p><pre class=" language-bash"><code class="language-bash">worker_processes  1<span class="token punctuation">;</span>events <span class="token punctuation">{</span>  worker_connections  1024<span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>  include   mime.types<span class="token punctuation">;</span>  default_type  application/octet-stream<span class="token punctuation">;</span>  sendfile  on<span class="token punctuation">;</span>  keepalive_timeout 65<span class="token punctuation">;</span>  <span class="token function">gzip</span>  on<span class="token punctuation">;</span>  gzip_vary on<span class="token punctuation">;</span>  gzip_comp_level 6<span class="token punctuation">;</span>  gzip_buffers 16 8k<span class="token punctuation">;</span>  gzip_min_length 1000<span class="token punctuation">;</span>  gzip_proxied any<span class="token punctuation">;</span>  gzip_disable <span class="token string">"msie6"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#gzip_http_version 1.0;</span>  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript<span class="token punctuation">;</span>  server <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#error_page 404 /404.html;</span>    error_page  500 502 503 504 /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>      root html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    listen 80<span class="token punctuation">;</span>    server_name localhost<span class="token punctuation">;</span>    location ~ .*\.<span class="token punctuation">(</span>css<span class="token operator">|</span>js<span class="token operator">|</span>swf<span class="token operator">|</span>html<span class="token operator">|</span>htm<span class="token operator">|</span>pdf<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>      root /var/www/html<span class="token punctuation">;</span>      autoindex on<span class="token punctuation">;</span>      index index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location / <span class="token punctuation">{</span>      charset utf-8<span class="token punctuation">;</span>      root  /var/www/html<span class="token punctuation">;</span>      index index.html index.htm<span class="token punctuation">;</span>      try_files <span class="token variable">$uri</span> /index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、docker-安装"><a href="#2、docker-安装" class="headerlink" title="2、docker 安装"></a>2、docker 安装</h3><ol><li><p>安装 Docker </p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> apt-transport-https ca-certificates curl software-properties-common$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -$ <span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce$ <span class="token function">sudo</span> <span class="token function">usermod</span> -a -G docker <span class="token variable">$USER</span><span class="token comment" spellcheck="true"># 如遇网络错误，请多试几次</span></code></pre></li><li><p>安装 Docker-compose</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">su</span>$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>//阿里云加速度</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span><span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://m0jhwyr4.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre></li><li><p>安装portainer</p><pre><code> 查找镜像： docker search portainer 下载镜像： docker pull portainer/portainer 启动：docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer  portainer/portainer</code></pre><p>访问9000端口，管理docker镜像</p></li><li><p>常用的docker 命令</p><p> 见文章 —后续补充</p></li></ol><h3 id="3、node-安装"><a href="#3、node-安装" class="headerlink" title="3、node 安装"></a>3、node 安装</h3><p>1.//如果安装nodejs 9.x版本</p><pre><code>curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -sudo apt-get install -y nodejs</code></pre><h3 id="4、Jenkins-安装"><a href="#4、Jenkins-安装" class="headerlink" title="4、Jenkins 安装"></a>4、Jenkins 安装</h3><pre><code>sudo apt-get install openjdk-8-jdk wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.listsudo apt-get updatesudo apt-get install jenkins// 启动 停止 重启service jenkins startservice jenkins restartservice jenkins stop</code></pre><p>默认8080</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> node安装 </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 高级类型</title>
      <link href="/typescript-gao-ji-lei-xing-ru-men.html"/>
      <url>/typescript-gao-ji-lei-xing-ru-men.html</url>
      
        <content type="html"><![CDATA[<h4 id="本文将介绍"><a href="#本文将介绍" class="headerlink" title="本文将介绍"></a>本文将介绍</h4><ol><li>交叉类型</li><li>联合类型</li><li>泛型<code>&lt;T&gt;</code></li><li>Partial</li><li>Required</li><li>Readonly</li><li>Pick</li><li>Omit</li><li>映射类型</li></ol><h5 id="1、交叉类型"><a href="#1、交叉类型" class="headerlink" title="1、交叉类型"></a>1、交叉类型</h5><p>交叉类型是将多个类型合并为一个类型。把多种类型叠加到一起成为一种类型。<code>PersonA &amp; PersonB &amp; PersonC</code>。</p><pre class=" language-javascript"><code class="language-javascript">type LeftType <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    left<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type RightType <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    right<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type IntersectionType <span class="token operator">=</span> LeftType <span class="token operator">&amp;</span> RightType<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> IntersectionType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token string">'test'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: 1, left: "test", right: "test"}</span></code></pre><h5 id="2、联合类型"><a href="#2、联合类型" class="headerlink" title="2、联合类型"></a>2、联合类型</h5><p>联合类型表示一个值可以是几种类型之一。 <code>number | string | boolean</code></p><pre class=" language-javascript"><code class="language-javascript">type UnionType <span class="token operator">=</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> UnionType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: test</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: 7</span></code></pre><p>注：如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员</p><pre><code>interface Bird {    fly();    layEggs();}interface Fish {    swim();    layEggs();}function getSmallPet(): Fish | Bird {    // ...}let pet = getSmallPet();pet.layEggs(); // okaypet.swim();    // errors  我们不能确定一个 Bird | Fish类型的变量是否有fly方法。 如果变量在运行时是 Fish类型，那么调用pet.fly()就出错了 </code></pre><h5 id="3、泛型-lt-T-gt"><a href="#3、泛型-lt-T-gt" class="headerlink" title="3、泛型&lt;T&gt;"></a>3、泛型<code>&lt;T&gt;</code></h5><p>可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型。</p><blockquote><p>如何创建泛型类型:需要使用<strong>&lt;&gt;</strong> 并将 T(名称可自定义)作为参数传递。</p></blockquote><ul><li>泛型接口</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    name<span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> GenericType<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'test'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: 1, name: "test"}</span><span class="token keyword">function</span> <span class="token function">showTypeTwo</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> GenericType<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showTypeTwo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: 1, name: 4}</span></code></pre><ul><li>多参数的泛型</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> T<span class="token punctuation">;</span>    name<span class="token punctuation">:</span> U<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> GenericType<span class="token operator">&lt;</span>number<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'test'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: 1, name: "test"}</span><span class="token keyword">function</span> <span class="token function">showTypeTwo</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> GenericType<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showTypeTwo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'This'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'Test'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: "001", name: Array["This", "is", "a", "Test"]}</span></code></pre><h5 id="4、Partial"><a href="#4、Partial" class="headerlink" title="4、Partial"></a>4、Partial</h5><p>Partial 允许你将T类型的所有属性设为可选,它将在每一个字段后面添加一个?。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">PartialType</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    firstName<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    lastName<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> Partial<span class="token operator">&lt;</span>PartialType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Partial&lt;PartialType> 等效于 interface PartialType {  id?: number  firstName?: string  lastName?: string}*/</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: 1}</span></code></pre><h5 id="5、Required"><a href="#5、Required" class="headerlink" title="5、Required"></a>5、Required</h5><p>将某个类型里的属性全部变为必选项</p><blockquote><p>Required<t></t></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">RequiredType</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    firstName<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    lastName<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> Required<span class="token operator">&lt;</span>RequiredType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: Type '{ id: number: }' is missing the following properties from type 'Required&lt;RequiredType>': firstName, lastName</span></code></pre><h5 id="6、Readonly"><a href="#6、Readonly" class="headerlink" title="6、Readonly"></a>6、Readonly</h5><p>会转换类型的所有属性，以使它们无法被修改</p><blockquote><p>Readonly<t></t></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">ReadonlyType</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> Readonly<span class="token operator">&lt;</span>ReadonlyType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    args<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Doe'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: Cannot assign to 'id' because it is a read-only property.</span></code></pre><h5 id="7、Pick"><a href="#7、Pick" class="headerlink" title="7、Pick"></a>7、Pick</h5><p>此方法允许你从一个已存在的类型 T中选择一些属性作为K, 从而创建一个新类型。</p><blockquote><p>Pick&lt;T, K&gt;</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">PickType</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    firstName<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    lastName<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> Pick<span class="token operator">&lt;</span>PickType<span class="token punctuation">,</span> <span class="token string">'firstName'</span> <span class="token operator">|</span> <span class="token string">'lastName'</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> firstName<span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token string">'Doe'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {firstName: "John"}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: Object literal may only specify known properties, and 'id' does not exist in type 'Pick&lt;PickType, "firstName" | "lastName">'</span></code></pre><h5 id="8、Omit"><a href="#8、Omit" class="headerlink" title="8、Omit"></a>8、Omit</h5><p>Omit的作用与Pick类型正好相反。不是选择元素，而是从类型T中删除K个属性。</p><blockquote><p>Omit&lt;T, K&gt;</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">PickType</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    firstName<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    lastName<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> Omit<span class="token operator">&lt;</span>PickType<span class="token punctuation">,</span> <span class="token string">'firstName'</span> <span class="token operator">|</span> <span class="token string">'lastName'</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: 7}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> firstName<span class="token punctuation">:</span> <span class="token string">'John'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: Object literal may only specify known properties, and 'firstName' does not exist in type 'Pick&lt;PickType, "id">'</span></code></pre><h5 id="9、映射类型"><a href="#9、映射类型" class="headerlink" title="9、映射类型"></a>9、映射类型</h5><p>映射类型允许你从一个旧的类型，生成一个新的类型。</p><blockquote><p>请注意，前面介绍的某些高级类型也是映射类型。如:</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*Readonly， Partial和 Pick是同态的，但 Record不是。 因为 Record并不需要输入类型来拷贝属性，所以它不属于同态：*/</span>type Readonly<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    readonly <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type Partial<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">type StringMap<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showType</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> StringMap<span class="token operator">&lt;</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> number<span class="token punctuation">;</span> name<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: Type 'number' is not assignable to type 'string'.</span><span class="token function">showType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'testId'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'This is a Test'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Output: {id: "testId", name: "This is a Test"}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.assign()是深拷贝还是潜拷贝</title>
      <link href="/object-assign-shi-shen-kao-bei-huan-shi-qian-kao-bei.html"/>
      <url>/object-assign-shi-shen-kao-bei-huan-shi-qian-kao-bei.html</url>
      
        <content type="html"><![CDATA[<h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。<br>🌰</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2 }</span></code></pre><p><code>注意：如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</code></p><h6 id="深拷贝还是潜拷贝"><a href="#深拷贝还是潜拷贝" class="headerlink" title="深拷贝还是潜拷贝?"></a>深拷贝还是潜拷贝?</h6><ul><li>对象的浅拷贝：浅拷贝是对象共用的一个内存地址，对象的变化相互印象。</li><li>对象的深拷贝：简单理解深拷贝是将对象放到新的内存中，两个对象的改变不会相互影响。</li></ul><hr><ol><li><p>举例一</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "d", age: 23}</span></code></pre><p>上面可看出修改了obj2 的值并没有修改到目标对象，看起来是<strong>深拷贝</strong></p></li><li><p>举例二</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>year<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2020</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "d", age: {year: 2020}}</span></code></pre><p>修改了obj2 的值,同时也修改到目标对象，看起来是<strong>潜拷贝</strong></p></li></ol><p><font color="red">总结：</font><strong>对于Object.assign()而言，如果对象的属性值为简单类型（string，number），通过Object.assign({},srcobj);得到的新对象为深拷贝；如果属性值为对象或其他引用类型，那对于这个对象而言其实是浅拷贝的，这是Object.assign()特别需要注意的地方。</strong></p><p>手写深拷贝：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深拷贝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深拷贝 </tag>
            
            <tag> 浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC和IFC，GFC和FFC</title>
      <link href="/bfc.html"/>
      <url>/bfc.html</url>
      
        <content type="html"><![CDATA[<h5 id="BFC概念"><a href="#BFC概念" class="headerlink" title="BFC概念"></a>BFC概念</h5><p>BFC 即 Block Formatting Contexts (块级格式化上下文)，具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素。可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p><h5 id="触发bfc"><a href="#触发bfc" class="headerlink" title="触发bfc"></a>触发bfc</h5><p>只要元素满足下面任一条件即可触发 BFC 特性：</p><ol><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ol><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>特性1、 同一个 BFC 上下margin会重叠,取最大的margin值。<br>    解决方法: 利用bfc特性，让其元素 添加一层div, 设置为overflow: hidden; 使它形成一块独立的bfc.<br><img src="/images/pasted-41.png" alt="upload successful"></p><p>特性2、 BFC可以包含浮动元素。<br>  浮动元素会脱离文档流，父元素没有高度，造成父高度塌陷。 父元素设置成BFC 可以解决</p><p><img src="/images/pasted-42.png" alt="upload successful"></p><p>特性3、BFC的区域不会与浮动容器发生重叠<br>如图<br><img src="/images/pasted-43.png" alt="upload successful"><br>给右元素添加overflow: hidden;形成BFC。</p><p><img src="/images/pasted-44.png" alt="upload successful"></p><h4 id="谈谈IFC"><a href="#谈谈IFC" class="headerlink" title="谈谈IFC"></a>谈谈IFC</h4><p>IFC（inline Formatting Context）叫做“行级格式化上下”<br>局规则如下：<br>1.内部的盒子会在水平方向，一个个地放置；<br>2.IFC的高度，由里面最高盒子的高度决定；<br>3.当一行不够放置的时候会自动切换到下一行</p><h4 id="GFC（GrideLayout-formatting-contexts）：网格布局格式化上下文"><a href="#GFC（GrideLayout-formatting-contexts）：网格布局格式化上下文" class="headerlink" title="GFC（GrideLayout formatting contexts）：网格布局格式化上下文"></a>GFC（GrideLayout formatting contexts）：网格布局格式化上下文</h4><p><strong>当为一个元素设置display值为grid的时候</strong>，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间</p><h4 id="FFC（Flex-formatting-contexts）-自适应格式上下文"><a href="#FFC（Flex-formatting-contexts）-自适应格式上下文" class="headerlink" title="FFC（Flex formatting contexts）:自适应格式上下文"></a>FFC（Flex formatting contexts）:自适应格式上下文</h4><p>display值为flex或者inline-flex的元素将会生成自适应容器（flex container）</p>]]></content>
      
      
      
        <tags>
            
            <tag> BFC </tag>
            
            <tag> IFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js浏览器全屏模式</title>
      <link href="/js-liu-lan-qi-quan-ping-mo-shi.html"/>
      <url>/js-liu-lan-qi-quan-ping-mo-shi.html</url>
      
        <content type="html"><![CDATA[<h6 id="1、进入全屏"><a href="#1、进入全屏" class="headerlink" title="1、进入全屏"></a>1、进入全屏</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> docElm <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//W3C</span><span class="token keyword">if</span><span class="token punctuation">(</span>docElm<span class="token punctuation">.</span>requestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    docElm<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//FireFox</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>docElm<span class="token punctuation">.</span>mozRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    docElm<span class="token punctuation">.</span><span class="token function">mozRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Chrome等</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>docElm<span class="token punctuation">.</span>webkitRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    docElm<span class="token punctuation">.</span><span class="token function">webkitRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//IE11</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>msRequestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    elem<span class="token punctuation">.</span><span class="token function">msRequestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="2、退出全屏"><a href="#2、退出全屏" class="headerlink" title="2、退出全屏"></a>2、退出全屏</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//W3C</span><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>exitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//FireFox</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>mozCancelFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">mozCancelFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Chrome等</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>webkitCancelFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">webkitCancelFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//IE11</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>msExitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">msExitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器(Iterator)和生成器(Generator)</title>
      <link href="/die-dai-qi-iterator-he-sheng-cheng-qi-generator.html"/>
      <url>/die-dai-qi-iterator-he-sheng-cheng-qi-generator.html</url>
      
        <content type="html"><![CDATA[<h5 id="一、迭代器"><a href="#一、迭代器" class="headerlink" title="一、迭代器"></a>一、迭代器</h5><h6 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h6><ul><li>迭代器是一个统一的接口，它的作用是使各种数据结构可被便捷的访问，它是通过一个键为Symbol.iterator 的方法来实现。</li><li>迭代器是用于遍历数据结构元素的指针（如数据库中的游标）。</li></ul><h6 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h6><ul><li>通过 Symbol.iterator 创建一个迭代器，指向当前数据结构的起始位置</li><li>随后通过 next 方法进行向下迭代指向下一个位置， next 方法会返回当前位置的对象，对象包含了 value 和 done 两个属性， value 是当前属性的值， done 用于判断是否遍历结束</li><li>当 done 为 true 时则遍历结束</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zero"</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> it <span class="token operator">=</span> items<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {value: "zero", done: false}</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {value: "one", done: false}</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {value: "two", done: false}</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {value: undefined, done: true}</span></code></pre><h6 id="可迭代的数据结构："><a href="#可迭代的数据结构：" class="headerlink" title="可迭代的数据结构："></a>可迭代的数据结构：</h6><ol><li>Array</li><li>String</li><li>Map</li><li>Set</li></ol><h6 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h6><p>for…of是 ES6 新引入的循环，用于替代 for..in 和 forEach() ，并且支持新的迭代协议。它可用于迭代常规的数据类型，如 Array 、 String 、 Map 和 Set 等等。</p><h4 id="二、生成器"><a href="#二、生成器" class="headerlink" title="二、生成器"></a>二、生成器</h4><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>生成器是一种返回迭代器的函数，通过function关键字后的星号(*)来表示，函数中会用到新的关键字yield。星号可以紧挨着function关键字，也可以在中间添加一个空格。<br>区别普通函数</p><ul><li>一是在 function 后面，函数名之前有个 * ；</li><li>函数内部有 yield 表达式。<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 生成器</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器Iterator </tag>
            
            <tag> 生成器Generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用设计模式</title>
      <link href="/javascript-chang-yong-she-ji-mo-shi.html"/>
      <url>/javascript-chang-yong-she-ji-mo-shi.html</url>
      
        <content type="html"><![CDATA[<h5 id="设计模式主要分为3类："><a href="#设计模式主要分为3类：" class="headerlink" title="设计模式主要分为3类："></a>设计模式主要分为3类：</h5><h6 id="1、创建型设计模式：专注于处理对象的创建"><a href="#1、创建型设计模式：专注于处理对象的创建" class="headerlink" title="1、创建型设计模式：专注于处理对象的创建"></a>1、创建型设计模式：专注于处理对象的创建</h6><p>Constructor构造器模式，Factory工厂模式，Singleton单例模式，builder生成器模式</p><h6 id="2、结构型设计模式：对象间组合，建立对象之间的关系"><a href="#2、结构型设计模式：对象间组合，建立对象之间的关系" class="headerlink" title="2、结构型设计模式：对象间组合，建立对象之间的关系"></a>2、结构型设计模式：对象间组合，建立对象之间的关系</h6><p>Decorator装饰者模式，Facade外观模式，Flyweight享元模式，Adapter适配器模式，Proxy代理模式</p><h6 id="3、行为设计模式：简化和改善对象间的通信"><a href="#3、行为设计模式：简化和改善对象间的通信" class="headerlink" title="3、行为设计模式：简化和改善对象间的通信"></a>3、行为设计模式：简化和改善对象间的通信</h6><p>Mediator中介者模式，Observer观察者模式</p><h5 id="一、-单例模式"><a href="#一、-单例模式" class="headerlink" title="一、 单例模式"></a>一、 单例模式</h5><p>单例模式限制一个类只有一个实例化对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用闭包实现</span><span class="token keyword">var</span> Leader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> _instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 待实例化的类</span>    <span class="token keyword">function</span> <span class="token function">_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'The Name Is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        getInstance<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>_instance<span class="token punctuation">)</span><span class="token punctuation">{</span>                _instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> _instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Leader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'dzk'</span><span class="token punctuation">)</span>Leader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="二、观察者模式"><a href="#二、观察者模式" class="headerlink" title="二、观察者模式"></a>二、观察者模式</h5><p>一个目标对象维持着一系列依赖于它的对象，将有关状态的任何变更自动通知观察者们。在观察者模式中，观察者需要直接订阅目标对象，观察者与目标对象之间有一定的依赖关系。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 目标对象</span><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 观察者列表</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 观察者1</span><span class="token keyword">class</span> <span class="token class-name">Observer1</span> <span class="token punctuation">{</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer1 change!'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 观察者2</span><span class="token keyword">class</span> <span class="token class-name">Observer2</span> <span class="token punctuation">{</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer2 change!'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 订阅</span><span class="token keyword">let</span> curSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> curObserver1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> curObserver2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>curSubject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>curObserver1<span class="token punctuation">)</span>curSubject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>curObserver2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发</span>curSubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="三、发布-订阅模式"><a href="#三、发布-订阅模式" class="headerlink" title="三、发布/订阅模式"></a>三、发布/订阅模式</h5><p>发布订阅模式可以说是观察这模式的一种变体，一种实现。它使用一个主题/事件通道，介于发布者和订阅者之间，避免了发布者和订阅者之间的依赖关系。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PubSub</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主题/事件通道</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">publish</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> subscribers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span>    subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subscriber <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">subscriber</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> subscriber <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>topics<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subscriber <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收函数1</span><span class="token keyword">let</span> subscriber1 <span class="token operator">=</span> <span class="token punctuation">(</span>reData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'subscriber1'</span><span class="token punctuation">,</span> reData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收函数2</span><span class="token keyword">let</span> subscriber2 <span class="token operator">=</span> <span class="token punctuation">(</span>reData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'subscriber2'</span><span class="token punctuation">,</span> reData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> pubsub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'reEvent'</span><span class="token punctuation">,</span> subscriber1 <span class="token punctuation">)</span>pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'reEvent'</span><span class="token punctuation">,</span> subscriber2 <span class="token punctuation">)</span>pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'reEvent'</span><span class="token punctuation">,</span> <span class="token string">'通知了'</span><span class="token punctuation">)</span></code></pre><h5 id="四、工厂模式"><a href="#四、工厂模式" class="headerlink" title="四、工厂模式"></a>四、工厂模式</h5><p>工厂函数提供一个通用的接口来创建对象，我们可以指定我们希望创建的对象类型，我们通知工厂函数需要什么类型的对象并提供对应的数据，返回对应的实例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> vehicleFactory <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'car'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> getInstance <span class="token operator">=</span> <span class="token function">vehicleFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">'car'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="五、抽象工厂模式"><a href="#五、抽象工厂模式" class="headerlink" title="五、抽象工厂模式"></a>五、抽象工厂模式</h5><p>抽象工厂模式，将对象的实现细节抽离出来。适用于需要和多种对象一起工作的场景。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>types <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">registerFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> factory  <span class="token punctuation">}</span>  <span class="token function">getInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">[</span>type<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">factory</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> abstractFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>abstractFactory<span class="token punctuation">.</span><span class="token function">registerFactory</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> Car<span class="token punctuation">)</span>abstractFactory<span class="token punctuation">.</span><span class="token function">registerFactory</span><span class="token punctuation">(</span><span class="token string">'truck'</span><span class="token punctuation">,</span> Truck<span class="token punctuation">)</span>abstractFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>abstractFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'truck'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型，行内元素边距，置换元素</title>
      <link href="/he-zi-mo-xing-xing-nei-yuan-su-bian-ju-zhi-huan-yuan-su.html"/>
      <url>/he-zi-mo-xing-xing-nei-yuan-su-bian-ju-zhi-huan-yuan-su.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-盒子模型"><a href="#一、-盒子模型" class="headerlink" title="一、 盒子模型"></a>一、 盒子模型</h3><p><img src="/images/pasted-36.png" alt="upload successful"></p><pre class=" language-plain"><code class="language-plain">box-sizing: content-box;//宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</code></pre><p><img src="/images/pasted-35.png" alt="upload successful"></p><pre class=" language-plain"><code class="language-plain">box-sizing: border-box;// 怪异盒子模型。 为元素设定的宽度和高度决定了元素的边框盒。元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</code></pre><h3 id="二、行内元素（如：span、em）"><a href="#二、行内元素（如：span、em）" class="headerlink" title="二、行内元素（如：span、em）"></a>二、行内元素（如：span、em）</h3><ol><li><p>具有盒子模型。</p></li><li><p>设置宽高不起左右。</p></li><li><p>padding  内边距上下左右都有效果，但是上下是效果显示，不会产生实际的作用，不影响其他元素。左右会产生实际距离。</p></li><li><p>margin  只有左右产生效果影响，上下不会产生任何效果作用。</p></li></ol><h3 id="三、-置换元素"><a href="#三、-置换元素" class="headerlink" title="三、 置换元素"></a>三、 置换元素</h3><p>置换元素：指浏览器是根据元素的属性来判断具体要显示的内容的元素。比如<code>img</code>标签，浏览器是根据其<code>src</code>的属性值来读取这个元素所包含的内容的，常见的替换元素还有</p><p><code>input</code>、<code>textarea</code>、<code>select</code>、<code>object</code>、<code>iframe</code>和<code>video</code>等等</p><p>img虽然是行内元素，但是它是置换元素，他的padding 和 margin 都会产生实际作用。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>new 的实现过程  es5 es6类的对比</title>
      <link href="/new-de-shi-xian-guo-cheng-es5-es6-lei-de-dui-bi.html"/>
      <url>/new-de-shi-xian-guo-cheng-es5-es6-lei-de-dui-bi.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、-手写new的实现过程"><a href="#1、-手写new的实现过程" class="headerlink" title="1、 手写new的实现过程"></a>1、 手写new的实现过程</h3><p>主要实现步骤： </p><ol><li>生成一个新对象 </li><li>为这个对象设置prototype </li><li>使用this执行构造函数 </li><li>返回这个对象 </li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 1.生成一个新对象 </span>    <span class="token keyword">let</span> obj<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 第一个参数是构造函数 </span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>Fn<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2.为这个对象设置prototype;实际上就是生产了一个新的上下文 </span>    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Fn<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3.使用apply在obj作用域中调用构造器函数，属性和方法被添加到 this 引用的对象即obj中 </span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果构造函数执行的结果返回的是一个对象，那么返回这个对象 </span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 4.如果构造函数返回的不是一个对象，返回创建的新对象 </span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> person1<span class="token operator">=</span><span class="token function">_new</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 相当于  var person1 = new Person(20); </span></code></pre><h3 id="2、es5和es6中类的对比"><a href="#2、es5和es6中类的对比" class="headerlink" title="2、es5和es6中类的对比"></a>2、es5和es6中类的对比</h3><p>静态、私有变量等， 定义实现的对比</p><h6 id="es5"><a href="#es5" class="headerlink" title="es5"></a>es5</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 私有变量 </span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 定义获取私有变量的方法 在原型上不能直接获取私有变量 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getNum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> num<span class="token punctuation">;</span>     <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// public</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//x，y定义在对象自身上面 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span> Point<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取私有变量 这里this.num直接获取不了 使用闭包返回数据 </span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//静态属性 </span>Person<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态方法 </span>Point<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">'staticFn'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出5 1 0 </span></code></pre><h6 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//相当于java中的构造函数，如果不写默认为空 </span>    <span class="token comment" spellcheck="true">// public</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//x，y定义在对象自身上面 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 私有属性 es2020 </span>  #num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态属性 </span>  <span class="token keyword">static</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态方法  </span>  <span class="token keyword">static</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">'staticFn'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//该方法定义在Point.prototype上 </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 访问私有属性 </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出5  10 </span></code></pre><h3 id="3、ES6中当函数用new关键词的时候，增加了new-target属性来判断当前调用的构造函数"><a href="#3、ES6中当函数用new关键词的时候，增加了new-target属性来判断当前调用的构造函数" class="headerlink" title="3、ES6中当函数用new关键词的时候，增加了new.target属性来判断当前调用的构造函数"></a>3、ES6中当函数用new关键词的时候，增加了new.target属性来判断当前调用的构造函数</h3><p>1、可以限制函数的调用，比如一定要用new命令来调用 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'必须用new生成实例'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>2、限制类的调用方法，判断new.target是不是未定义。写出只能被继承使用的类。 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'本类不能实例化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// ... </span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 报错 </span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正确 </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new实现 </tag>
            
            <tag> es5类 </tag>
            
            <tag> es6类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this 和 构造函数有return </title>
      <link href="/this-zhi-xiang-he-gou-zao-han-shu-you-return.html"/>
      <url>/this-zhi-xiang-he-gou-zao-han-shu-you-return.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、-es5中-this"><a href="#一、-es5中-this" class="headerlink" title="一、 es5中 this"></a>一、 es5中 this</h2><pre class=" language-plain"><code class="language-plain">  1.在普通函数中的this总是代表他的直接调用者，默认情况下指向windos   2.在严格模式下，没有直接调用者的函数中的this是undefined使用     3.call,apply,bind，this指向的是绑定的对象；   4.构造函数中的this </code></pre><h2 id="二、-es6-箭头函数中-this"><a href="#二、-es6-箭头函数中-this" class="headerlink" title="二、  es6 箭头函数中 this"></a>二、  es6 箭头函数中 this</h2><pre class=" language-plain"><code class="language-plain">箭头函数中的this指向是固定不变的，指向的是定义它的环境，最近的作用域。 </code></pre><p><strong>1、点击事件绑定的this指向</strong> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>     <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"draw"</span> id<span class="token operator">=</span><span class="token string">"draw"</span><span class="token operator">></span>Draw<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>     <span class="token operator">&lt;</span>div onclick<span class="token operator">=</span><span class="token string">"func(this)"</span>  name<span class="token operator">=</span><span class="token string">"book1"</span><span class="token operator">></span>click div<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span>script<span class="token operator">></span>                   <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>_this<span class="token punctuation">)</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前点击的div </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window </span>      <span class="token punctuation">}</span>             <span class="token keyword">var</span> drawDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'draw'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        drawDom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前div </span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>         drawDom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window </span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span> </code></pre><p><strong>2、嵌套函数</strong> </p><blockquote><p>和变量不同，关键字this没有作用域的限制，嵌套的函数不会从调用它的函数中继承this。</p></blockquote><blockquote><p>1、如果嵌套函数作为方法调用，其this的值指向调用它的对象。 </p></blockquote><blockquote><p>2、如果嵌套函数作为函数调用，其this值不是全局对象（非严格模式下）就是undefined（严格模式下）。 </p></blockquote><blockquote><p>很多人误以为调用嵌套函数时this会指向调用外层函数的上下文。如果你想访问这个外部函数的this值，需要将this的值保存在一个变量里，这个变量和内部函数都在同一个作用域内。通常用self来保存this。</p></blockquote><blockquote><p>——《犀牛书》8.2 函数调用 </p></blockquote><p>举例说明 </p><pre class=" language-plain"><code class="language-plain">var  name  =  "windName" var data = {      name:' d a taNam e',      fn: function (){             var  name  =  "fnName"            console.log(this .name ) //输出：dataName this指向data             var fn2 = () =>{             var name = "fn2Name"                  console.log(this.name)  //输出：dataName            }             var fn3 = function(){             var name = "fn3Name"             console.log(this.name) //输出：windName         }            fn2();         fn3(); // ** 嵌套的函数调用  this指向window(非严格模式)      } } data.fn();   // 作为方法调用  输出： dataName dataName windName </code></pre><pre class=" language-plain"><code class="language-plain">var a = {   foo: 1,   bar: () => console.log(this.foo)//这里是箭头函数指向 定义该箭头函数的作用域 } a.bar()  //undefined  this指向的window </code></pre><h2 id="三、-当函数构造函数有return时候"><a href="#三、-当函数构造函数有return时候" class="headerlink" title="三、 当函数构造函数有return时候"></a>三、 当函数构造函数有return时候</h2><blockquote><p>1.return的是五种简单数据类型：String，Numbe r ，Boolean，Null，Undefined。</p></blockquote><blockquote><p>这种情况下，忽视return值，依然返回this对象。 </p></blockquote><blockquote><p>2.return的是Object 引用类型。 </p></blockquote><blockquote><p>这种情况下，不再返回this对象，而是返回return语句的返回值 </p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常情况 </span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">// 12 </span><span class="token comment" spellcheck="true">//举例  </span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">// undefined   return返回的是引用类型。返回的是 {} </span><span class="token comment" spellcheck="true">//举例 </span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">//输出： 99  return返回的是引用类型。返回的是 {age: 99} </span><span class="token comment" spellcheck="true">//举例 </span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">13</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">// 输出：12  return 12 返回的数值类型，返回this的对象 </span></code></pre><h2 id="四、题型"><a href="#四、题型" class="headerlink" title="四、题型"></a>四、题型</h2><h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出：[f,2,4]。 这里this指向的是arr</span><span class="token keyword">var</span> fun <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输入的是 window </span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    f<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj==>'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// obj['f']()和obj.f() 调用一样 输出 {f: f函数}</span>obj<span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h6 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==>'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">var</span> funs <span class="token operator">=</span> <span class="token punctuation">{</span>  f<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f==>'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出：==>window。 这里调用参数a 相当于windows.f ---> funs.f(windows.f,'d',2)</span>      <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出：f==>window 调用最近作用域的f()函数。为什么不能window.f()调用？ </span>      arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出：[f(),'d',2] 。就是arguments本身 跟上面的数组调用一个道理</span><span class="token punctuation">}</span><span class="token punctuation">}</span>funs<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>为什么不能window.f()？？。因为这里的f是在函数内部创建的，作用域在函数内。f()这里是自执行，并没有直接对象调用，所以f函数内指向的window。</p><p>注：this指向window,不一定该函数指向window作用域上。this指向和函数作用域不是相互。</p><h6 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>    say<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//window</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行obj.say()的时候返回的是个函数，后面再去调用的这个返回函数,相当于这样执行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> refun <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">refun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h6 id="实例4-settimeout"><a href="#实例4-settimeout" class="headerlink" title="实例4 settimeout"></a>实例4 settimeout</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>    getage<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>getage<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// undefined</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>    obj<span class="token punctuation">.</span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>第一个setTimeout，执行obj.getage 之后，相当于setTimeout的回调是一个匿名函数，执行的时候，函数内部未设置this的指向。相当于是普通函数调用。所以this默认指向window，所以结果是undefined。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
            <tag> 构造函数return  </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型题-解析</title>
      <link href="/yuan-xing-lian-ti-jie-xi.html"/>
      <url>/yuan-xing-lian-ti-jie-xi.html</url>
      
        <content type="html"><![CDATA[<p>题目如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Fun<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>结果： </p><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4  </span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 </span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 无输出 返回Window对象 </span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 </span> <span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 </span></code></pre><p>首先明白变量和函数提升， <strong>函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。</strong> </p><p>// 举例说明 变量和函数提升（懂的自动跳过） </p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出： 1 ， 2 </span><span class="token comment" spellcheck="true">// 执行的代码顺序如下 </span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 1 </span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出2  </span></code></pre><h5 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h5><p>题目中变量提升后的写法（方便李姐） </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// getName 变量提升 </span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">var</span> getName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属性上添加getName </span>Fun<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 原型上添加方法 </span>Fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><h5 id="1-Fun-getName"><a href="#1-Fun-getName" class="headerlink" title="1. Fun().getName()"></a>1. Fun().getName()</h5><p>首先执行Fun()时，返回this,这里指向window，相当于 window.getName() ,  getName最后被 </p><p>console.log(4) 的函数赋值； </p><p>所以输出： 4; </p><h5 id="2-getName"><a href="#2-getName" class="headerlink" title="2.getName()"></a>2.getName()</h5><p>相当于执行 window.getName()， 同上。 </p><p>输出：4； </p><h5 id="3-Fun"><a href="#3-Fun" class="headerlink" title="3.Fun()"></a>3.Fun()</h5><p>返回this, 当前环境 window </p><h5 id="4-new-Fun-getName"><a href="#4-new-Fun-getName" class="headerlink" title="4.new Fun().getName()"></a>4.new Fun().getName()</h5><p>这里的执行顺序是 1.先 new Fun()    2.再执行getName() </p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 相当于执行 </span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      fn<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>执行new Fun()  实例化的对象 后 ， getName()方法实会去 Fun构造函数中找，没找到然后会去原型   prototype上去找getName。<br>这里原型链有该函数，调用 </p><pre class=" language-plain"><code class="language-plain">// 搞清楚 如下 function A(){     this.names = "ab" } A.names = "kk" A.prototype.names = "99" var a = new A() console.log(a.names) // ab console.log(A.names) // kk </code></pre><h5 id="5-new-new-Fun-getName"><a href="#5-new-new-Fun-getName" class="headerlink" title="5.new new Fun().getName()"></a>5.new new Fun().getName()</h5><p>执行顺序： 1. new Fun()   2. new  Fun.prototype.getName() </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 相当于执行 </span><span class="token keyword">var</span> Fn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> Fn2 <span class="token operator">=</span> Fn1<span class="token punctuation">.</span>getName  <span class="token keyword">new</span> <span class="token class-name">Fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型  </tag>
            
            <tag> 变量提升 </tag>
            
            <tag> 函数提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回流 重绘</title>
      <link href="/hui-liu-chong-hui.html"/>
      <url>/hui-liu-chong-hui.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><ul><li><p><strong>dom-tree:</strong> 浏览器把获取到的HTML代码解析成1个DOM树，DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。</p></li><li><p><strong>样式结构体:</strong> 浏览器把所有样式(用户定义的CSS和用户代理)解析。</p></li><li><p><strong>render tree（渲染树）:</strong>  <strong>dom-tree</strong> + <strong>样式结构体</strong>, render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。</p></li><li><p><strong>回流：</strong>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的</p><p>例子：</p><ol><li>添加或者删除可见的DOM元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li><li>内容变化，比如用户在input框中输入文字</li><li>浏览器窗口尺寸改变——resize事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li></ol></li><li><p><strong>重绘：</strong>render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如字体color。则就叫称为重绘。</p></li></ul><h4 id="二、回流重绘区别："><a href="#二、回流重绘区别：" class="headerlink" title="二、回流重绘区别："></a>二、回流重绘区别：</h4><ul><li>至少会发生一次回流。</li><li>回流必将引起重绘，而重绘不一定会引起回流。</li></ul><h4 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h4><p>可以发现回流的成本要比重绘的成本高，与构建的render-tree 节点有关系。</p><ul><li><h6 id="浏览器优化"><a href="#浏览器优化" class="headerlink" title="浏览器优化"></a>浏览器优化</h6><p>浏览器自建一个队列，当回流和重绘达到一定数量或时间时，浏览器再更新。</p></li><li><h6 id="代码层优化"><a href="#代码层优化" class="headerlink" title="代码层优化"></a>代码层优化</h6><h6 id="1-添加dom节点时，创建个模板，一次添加完，不要一个个单独添加。"><a href="#1-添加dom节点时，创建个模板，一次添加完，不要一个个单独添加。" class="headerlink" title="1. 添加dom节点时，创建个模板，一次添加完，不要一个个单独添加。"></a>1. 添加dom节点时，创建个模板，一次添加完，不要一个个单独添加。</h6><h6 id="2-分离读写"><a href="#2-分离读写" class="headerlink" title="2.分离读写"></a>2.分离读写</h6><p>  样式集中修改（浏览器优化机制），集中读取offsetWidth等属性（如果浏览器队列中回流等，每次读取这些属性都会引起回流），建议通过改变class或者csstext属性集中改变样式。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 会引起四次 回流</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'10px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'10px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'20px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'20px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一次回流(前面4个样式的设置，浏览器会优化一次渲染)</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'10px'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'10px'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'20px'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'20px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 推荐使用 class 和 cssText 改变</span>el<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" theclassname"</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"; left: "</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token string">"px; top: "</span> <span class="token operator">+</span> top <span class="token operator">+</span> <span class="token string">"px;"</span><span class="token punctuation">;</span></code></pre><h6 id="3-缓存布局信息"><a href="#3-缓存布局信息" class="headerlink" title="3.缓存布局信息"></a>3.缓存布局信息</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// bad 强制刷新 触发两次重排</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good 缓存布局信息 相当于读写分离</span><span class="token keyword">var</span> curLeft <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token keyword">var</span> curTop <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> curLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> curTop <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span></code></pre><h6 id="4-隐藏dom-再修改样式"><a href="#4-隐藏dom-再修改样式" class="headerlink" title="4.隐藏dom,再修改样式"></a>4.隐藏dom,再修改样式</h6><pre class=" language-javascript"><code class="language-javascript">dom<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token comment" spellcheck="true">// 修改dom样式，修改完再显示dom</span>dom<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 重绘 </tag>
            
            <tag> 回流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http缓存</title>
      <link href="/http-huan-cun.html"/>
      <url>/http-huan-cun.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、3种强缓存"><a href="#一、3种强缓存" class="headerlink" title="一、3种强缓存"></a>一、3种强缓存</h3><p><strong>描述：</strong> 不需要发送请求到服务端，直接读取浏览器本地缓存</p><h6 id="1-Expires（最低优先级）"><a href="#1-Expires（最低优先级）" class="headerlink" title="1. Expires（最低优先级）"></a>1. Expires（最低优先级）</h6><p>Expires 的值是一个 HTTP 日期，WEB服务器使用Expires头来告诉Web客户端，会根据系统时间和 Expires 的值进行比较，如果系统时间超过了 Expires 的值，缓存失效。由于和系统时间进行比较，所以当系统时间和服务器时间不一致的时候，会有缓存有效期不准的问题。</p><p>Expires 的优先级在三个 Header 属性中是最低的。</p><h6 id="2-Cache-Control（中）"><a href="#2-Cache-Control（中）" class="headerlink" title="2. Cache-Control（中）"></a>2. Cache-Control（中）</h6><p>max-age：单位是秒，缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效</p><p>no-cache：不使用强缓存，需要与服务器验证缓存是否新鲜</p><p>no-store：禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源</p><p>private：专用于个人的缓存，中间代理、CDN 等不能缓存此响应</p><p>public：响应可以被中间代理、CDN 等缓存</p><p>must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证</p><h6 id="3-Pragma（最高）"><a href="#3-Pragma（最高）" class="headerlink" title="3. Pragma（最高）"></a>3. Pragma（最高）</h6><p>Pragma 只有一个属性值，就是 no-cache ，效果和 Cache-Control 中的 no-cache 一致</p><h3 id="二、协商缓存"><a href="#二、协商缓存" class="headerlink" title="二、协商缓存"></a>二、协商缓存</h3><p>当浏览器的强缓存无效，并且在<strong>请求头中设置</strong>了<strong>If-Modified-Since</strong> 或者 <strong>If-None-Match </strong>的时候，会将这两个属性值到服务端去验证是否命中协商缓存，如果命中了协商缓存，会返回 <strong>304 状态</strong>，加载浏览器缓存，并且<strong>响应头</strong>会设置 <strong>Last-Modified</strong> 或者<strong> ETag </strong>属性。</p><h6 id="1-ETag（返回头）-If-None-Match（请求头设置）"><a href="#1-ETag（返回头）-If-None-Match（请求头设置）" class="headerlink" title="1. ETag（返回头）     If-None-Match（请求头设置）"></a>1. ETag（返回头）     If-None-Match（请求头设置）</h6><p>ETag/If-None-Match 的值是一串 hash 码，代表的是一个资源的标识符，当服务端的文件变化的时候，它的 hash码会随之改变，通过请求头中的 If-None-Match 和当前文件的 hash 值进行比较，如果相等则表示命中协商缓存。ETag 又有强弱校验之分，如果 hash 码是以 “W/“ 开头的一串字符串，说明此时协商缓存的校验是弱校验的，只有服务器上的文件差异（根据 ETag 计算方式来决定）达到能够触发 hash 值后缀变化的时候，才会真正地请求资源，否则返回 304 并加载浏览器缓存。</p><h6 id="2-Last-Modified（返回头）-If-Modified-Since（请求头设置）"><a href="#2-Last-Modified（返回头）-If-Modified-Since（请求头设置）" class="headerlink" title="2.  Last-Modified（返回头） If-Modified-Since（请求头设置）"></a>2.  Last-Modified（返回头） If-Modified-Since（请求头设置）</h6><p> Last-Modified/If-Modified-Since 的值代表的是文件的最后修改时间，第一次请求服务端会把资源的最后修改时间放到 Last-Modified 响应头中，第二次发起请求的时候，请求头会带上上一次响应头中的 Last-Modified 的时间，并放到 If-Modified-Since 请求头属性中，服务端根据文件最后一次修改时间和 If-Modified-Since 的值进行比较，如果相等，返回 304 ，并加载浏览器缓存。</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柯里化-偏函数-反柯里化</title>
      <link href="/ke-li-hua-pian-han-shu-fan-ke-li-hua.html"/>
      <url>/ke-li-hua-pian-han-shu-fan-ke-li-hua.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-柯里化"><a href="#1-柯里化" class="headerlink" title="1. 柯里化"></a>1. 柯里化</h3><p> <strong>描述：</strong>柯里化算是特殊的偏函数，把一个多参数函数转换成多个单参数函数，也就是说把一个具有n个参数的函数转换成n个一元函数</p><p><strong> 特点： </strong> </p><p>1、闭包，调用柯里化函数（currie）返回另外一个函数（_myFn），通过闭包缓存真正执行运算的函数（fn）和参数（args）</p><p>2、 通过返回的函数传递参数，并进行判断，如果参数已经传递够了，就执行函数（fn)并返回结果，如果参数还没传递完，则继续返回函数（_myFn）接收参数</p><p><strong>例子：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常写法</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token keyword">const</span> resAdd <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 柯里化</span><span class="token keyword">const</span> add <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> resCurrie <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="2-偏函数"><a href="#2-偏函数" class="headerlink" title="2. 偏函数"></a>2. 偏函数</h3><p><strong>描述： </strong>偏函数又叫局部应用，固定函数的一个或多个参数  </p><p><strong>特点：</strong>偏函数的代码比较简单，就是利用闭包缓存实际的执行方法（fn）和与之的参数（preset），然后返回一个接收剩余参数的方法，方法的实现就是执行fn并返回结果</p><p><strong>举例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 一般写法 </span><span class="token comment" spellcheck="true">// 封装一个ajax方法</span><span class="token keyword">function</span> ajax <span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用ajax方法，</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'http://xxx.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 A })</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'http://xxx.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token string">'bb'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 B })</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'http://xxx.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> y<span class="token punctuation">:</span> <span class="token string">'yy'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 Y })</span><span class="token comment" spellcheck="true">// 上面url参数重复填写</span><span class="token comment" spellcheck="true">// 偏函数</span><span class="token keyword">function</span> partial <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用偏函数</span><span class="token keyword">const</span> partialAjax <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'http://lyn.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送ajax请求</span><span class="token function">partialAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 A })</span><span class="token function">partialAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token string">'bb'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 B })</span><span class="token function">partialAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> y<span class="token punctuation">:</span> <span class="token string">'yy'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 Y })</span></code></pre><h3 id="3-反柯里化"><a href="#3-反柯里化" class="headerlink" title="3.反柯里化"></a>3.反柯里化</h3><p><strong>描述：</strong> 反柯里化作用和偏函数相反，它的本质是增强一个函数的使用范围，让一个对象可以使用不属于对象自己的方法，就像apply、call、bind（也有偏函数的作用）的作用，而事实上反柯里化就是通过apply、call方法实现的。</p><p><strong>举例：</strong></p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uncurrie <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 参数obj是需要操作的对象</span>  <span class="token comment" spellcheck="true">// 这里的this是指obj对象需要借用的方法，比如示例中的Array.prototype.push</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 难点，以下代码相当于：fn.call(obj, ...args), 没理解请看下面的 “代码解析” 部分</span>    <span class="token keyword">return</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例，导出Array.prototype.push方法给对象使用</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span> <span class="token punctuation">}</span><span class="token keyword">const</span> push <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">uncurrie</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// {0: "b", 1: "c", a: "aa", length: 2}</span></code></pre><p>参考：<a href="https://segmentfault.com/a/1190000022416728" target="_blank" rel="noopener">https://segmentfault.com/a/1190000022416728</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 柯里化 </tag>
            
            <tag> 偏函数 </tag>
            
            <tag> 反柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机自启全屏设置chrome和firefox</title>
      <link href="/ubuntu-she-zhi-chrome-he-firefox-kai-ji-quan-ping-zi-qi.html"/>
      <url>/ubuntu-she-zhi-chrome-he-firefox-kai-ji-quan-ping-zi-qi.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-设置开机自启浏览器"><a href="#一-设置开机自启浏览器" class="headerlink" title="一. 设置开机自启浏览器"></a>一. 设置开机自启浏览器</h3><h5 id="注：-此设置基于ubuntu系统"><a href="#注：-此设置基于ubuntu系统" class="headerlink" title="注： 此设置基于ubuntu系统"></a>注： 此设置基于ubuntu系统</h5><h6 id="1-新建autostar"><a href="#1-新建autostar" class="headerlink" title="1.新建autostar"></a>1.新建autostar</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看有没有autostart文件,没有新建</span>$ <span class="token function">mkdir</span> ~/.config/autostart</code></pre><h6 id="2-拷贝-desktop-到-autostart"><a href="#2-拷贝-desktop-到-autostart" class="headerlink" title="2.拷贝.desktop 到 autostart"></a>2.拷贝.desktop 到 autostart</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找应用位置(如谷歌) sudo find / -name *google-chrome.desktop  </span>$ <span class="token function">cp</span> /usr/share/applications/firefox.desktop ~/.config/autostart/</code></pre><h6 id="3-文件授权"><a href="#3-文件授权" class="headerlink" title="3.文件授权"></a>3.文件授权</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> +x ~/.config/autostart/firefox.desktop</code></pre><p><img src="/images/pasted-22.png" alt="upload successful"></p><p><img src="/images/pasted-23.png" alt="upload successful"></p><h3 id="二-设置火狐全屏设置"><a href="#二-设置火狐全屏设置" class="headerlink" title="二. 设置火狐全屏设置"></a>二. 设置火狐全屏设置</h3><h6 id="1-火狐浏览器自动全屏插件：-Auto-Fullscreen-注：容易安装成另外一款，特此标注"><a href="#1-火狐浏览器自动全屏插件：-Auto-Fullscreen-注：容易安装成另外一款，特此标注" class="headerlink" title="1.火狐浏览器自动全屏插件： Auto Fullscreen  注：容易安装成另外一款，特此标注"></a>1.火狐浏览器自动全屏插件： Auto Fullscreen  注：容易安装成另外一款，特此标注</h6><p><img src="/images/pasted-25.png" alt="upload successful"></p><h6 id="2-设置浏览器打开不显示上次的历史记录"><a href="#2-设置浏览器打开不显示上次的历史记录" class="headerlink" title="2.设置浏览器打开不显示上次的历史记录"></a>2.设置浏览器打开不显示上次的历史记录</h6><p><img src="/images/pasted-27.png" alt="upload successful"><br><img src="/images/pasted-26.png" alt="upload successful"></p><h3 id="三-谷歌全屏，不输密码设置"><a href="#三-谷歌全屏，不输密码设置" class="headerlink" title="三. 谷歌全屏，不输密码设置"></a>三. 谷歌全屏，不输密码设置</h3><h6 id="1-每次打开谷歌需要输入密码，免密设置如下"><a href="#1-每次打开谷歌需要输入密码，免密设置如下" class="headerlink" title="1.每次打开谷歌需要输入密码，免密设置如下"></a>1.每次打开谷歌需要输入密码，免密设置如下</h6><p><img src="/images/pasted-31.png" alt="upload successful"></p><p><img src="/images/pasted-32.png" alt="upload successful"></p><h6 id="2-谷歌浏览器全屏设置"><a href="#2-谷歌浏览器全屏设置" class="headerlink" title="2.谷歌浏览器全屏设置"></a>2.谷歌浏览器全屏设置</h6><p><img src="/images/pasted-28.png" alt="upload successful"></p><p><img src="/images/pasted-29.png" alt="upload successful"><br>在command输入最后写入启动打开的地址和全屏参数：<code>http://localhost:8000 --start-fullscreen</code></p><pre><code>/usr/bin/google-chrome-stable %U http://localhost:8000 --start-fullscreen</code></pre><p><img src="/images/pasted-30.png" alt="upload successful"></p><h6 id="保存即可"><a href="#保存即可" class="headerlink" title="保存即可!"></a>保存即可!</h6><h3 id="四-win10-自启项设置"><a href="#四-win10-自启项设置" class="headerlink" title="四. win10 自启项设置"></a>四. win10 自启项设置</h3><h6 id="1-按下win-R调出运行窗口，并输入“shell-startup”即可进入开机启动文件夹"><a href="#1-按下win-R调出运行窗口，并输入“shell-startup”即可进入开机启动文件夹" class="headerlink" title="1.按下win+R调出运行窗口，并输入“shell:startup”即可进入开机启动文件夹"></a>1.按下win+R调出运行窗口，并输入“shell:startup”即可进入开机启动文件夹</h6><p><img src="/images/pasted-37.png" alt="upload successful"></p><h6 id="2-添加启动项，可以将软件快捷方式移入开机启动文件夹中，即可"><a href="#2-添加启动项，可以将软件快捷方式移入开机启动文件夹中，即可" class="headerlink" title="2.添加启动项，可以将软件快捷方式移入开机启动文件夹中，即可"></a>2.添加启动项，可以将软件快捷方式移入开机启动文件夹中，即可</h6><p><img src="/images/pasted-39.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu浏览器自启设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu  </tag>
            
            <tag> 浏览器自启全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件</title>
      <link href="/js-shi-jian-liu.html"/>
      <url>/js-shi-jian-liu.html</url>
      
        <content type="html"><![CDATA[<h3 id="js事件"><a href="#js事件" class="headerlink" title="js事件"></a>js事件</h3><h6 id="概念-HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等-当页面产生一个事件时-该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流"><a href="#概念-HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等-当页面产生一个事件时-该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流" class="headerlink" title="概念:HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等,当页面产生一个事件时,该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流"></a>概念:HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等,当页面产生一个事件时,该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流</h6><h5 id="一-当页面产生一个事件时经过的三个阶段"><a href="#一-当页面产生一个事件时经过的三个阶段" class="headerlink" title="一. 当页面产生一个事件时经过的三个阶段:"></a>一. 当页面产生一个事件时经过的三个阶段:</h5><ol><li>事件捕获阶段<br>document顶部先接收到事件，依次往下传播到事件节点（可以借用addEventListener来模拟事件捕获流）</li><li>处于目标阶段</li><li>事件冒泡阶段<br>事件开始时由最具体的元素接收，然后逐级向上传播<br>执行流程:<br><img src="/images/pasted-19.png" alt="upload successful"></li></ol><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h5><p><img src="/images/pasted-20.png" alt="upload successful"><br><img src="/images/pasted-21.png" alt="upload successful"><br>说明: addEventListener 第一个参数: 事件名称, 第二个参数: 触发函数, 第三个参数: 布尔 默认false, true表示捕获阶段触发, fals事件冒泡阶段</p><h5 id="三：js阻止事件冒泡和默认事件"><a href="#三：js阻止事件冒泡和默认事件" class="headerlink" title="三：js阻止事件冒泡和默认事件"></a>三：js阻止事件冒泡和默认事件</h5><p>阻止事件冒泡:<br>w3c:e.stopPropagation<br>ie:window.event.cancelBubble = true</p><p>默认事件：是指目标元素的默认行为比如a标签会跳转链接 form会提交表单<br>w3c:e.preventDefault()<br>ie:window.event.returnValue = false</p><p>另外js中的return false也可以阻止默认行为,jq中的return false既可以阻止默认行为也可以阻止冒泡</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 事件绑定的方式, 用return false; 不会阻止默认事件</span>  oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'btn处于事件冒泡阶段 - 5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以下代码 return false;可以阻止</span>oBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>return false ? <a href="https://blog.csdn.net/andyzhaojianhui/article/details/45581463" target="_blank">参考文章</a></p><h4 id="四、target-和-currentTarget"><a href="#四、target-和-currentTarget" class="headerlink" title="四、target 和 currentTarget"></a>四、target 和 currentTarget</h4><p>event.target指向引起触发事件的元素，而event.currentTarget则是事件绑定监听的元素。</p><h4 id="五、宏任务和微任务"><a href="#五、宏任务和微任务" class="headerlink" title="五、宏任务和微任务"></a>五、宏任务和微任务</h4><p>macrotask（宏任务）：主代码块，setTimeout，setInterval等（可以看到，事件队列中的每一个事件都是一个macrotask）</p><p>microtask（微任务）：Promise，process.nextTick等</p><p><img src="/images/pasted-33.png" alt="upload successful"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 代码1</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代码2</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代码3</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代码4</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 代码5</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 7 1 2 6 4 8 3 5</span></code></pre><p>代码1、2定义异步函数。首先按主代码块顺序执行·代码3，由于异步函数返回，放入微任务[console.log(4)] 。主代码执行·代码4输出:<code>7</code>，等待异步返回放到微任务[console.log(4),console.log(8)]。主代码执行·代码5放入宏任务[console.log(5)]。</p><p>然后执行async1()，输出:<code>1</code>,async1()里面执行async2()，输出:<code>2</code>。由于async2()返回结果是异步，加入微任务等待[console.log(4),console.log(8),console.log(3)]<br>最后主代码执行console.log(6)输出：<code>6</code>。主代码执行完毕。</p><p>现在来看，微任务列表有  [console.log(4),console.log(8),console.log(3)]。宏任务有[console.log(5)]。</p><p>由于有微任务，先执行微任务，依次输出：<code>4 8 3</code>，宏任务执行完成。</p><p>执行下一个宏任务[console.log(5)]，输出：<code>5</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="/jie-liu-he-fang-dou.html"/>
      <url>/jie-liu-he-fang-dou.html</url>
      
        <content type="html"><![CDATA[<h5 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖(debounce)"></a>函数防抖(debounce)</h5><p><strong>含义:</strong> 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p><p>debounce 使用场景</p><ul><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li><li>频繁操作点赞和取消点赞，因此需要获取最后一次操作结果并发送给服务器</li></ul><p>代码示例:</p><pre class=" language-javascript"><code class="language-javascript">   <span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"搜索"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSearch<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/**     * 防抖函数--异步搜索     */</span>    <span class="token keyword">private</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">,</span> delay<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流(throttle)"></a>函数节流(throttle)</h5><p><strong>含义:</strong> 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p><ul><li>throttle使用场景</li><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li></ul><p>代码示例:</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/**     * 节流函数     */</span>    <span class="token keyword">private</span> throttle <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">,</span> delay<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isRuning<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            isRuning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p><strong>函数防抖：</strong> 将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p><p><strong>函数节流：</strong> 使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序web-view中使用JSSDK,ios安卓踩坑</title>
      <link href="/web-view-react-zhong-jssdk.html"/>
      <url>/web-view-react-zhong-jssdk.html</url>
      
        <content type="html"><![CDATA[<h6 id="背景-在小程序中使用web-view使用react-需要调用相关JSSDK的接口配置-IOS能正常使用-安卓却签名错误invalid-signature"><a href="#背景-在小程序中使用web-view使用react-需要调用相关JSSDK的接口配置-IOS能正常使用-安卓却签名错误invalid-signature" class="headerlink" title="背景: 在小程序中使用web-view使用react,需要调用相关JSSDK的接口配置, IOS能正常使用,安卓却签名错误invalid signature"></a>背景: 在小程序中使用web-view使用react,需要调用相关JSSDK的接口配置, IOS能正常使用,安卓却签名错误<font color="red" size="4">invalid signature</font></h6><h6 id="基础配置按照官方文档来-这里说明下配置注意事项"><a href="#基础配置按照官方文档来-这里说明下配置注意事项" class="headerlink" title="基础配置按照官方文档来, 这里说明下配置注意事项:"></a>基础配置按照<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank">官方文档</a>来, 这里说明下配置注意事项:</h6><ol><li><p>引入微信jssdk，wx.config所用到的工具函数，appid 要使用<font color="red" size="4">公众号的APPID</font>，如果APPID使用的是小程序的APPID，config时会报签名无效，要注意config签名参数的大小写</p></li><li><p>在公众号里面配置,js安全域名配置成web-view的域名</p></li></ol><p>以上配置成功后, 在IOS中使用都能正常使用, 却在安卓机器上使用签名失败<font color="red" size="4">invalid signature</font>, 硬是没在网上找到相关解决方案, 很多都是安卓使用正常, IOS使用异常. </p><p>煎熬两天综合了其他问题,经过尝试终于通了,记录一下解决方案, 希望帮助遇到同样问题的人</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://res.wx.qq.com/open/js/jweixin-1.3.2.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// web-view进入react的第一时间, index.html时记录url</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>entryUrl <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>entryUrl <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span>entryUrl <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 发送给后端签名时 这里就需要区分了!!</span><span class="token keyword">let</span> isAnd <span class="token operator">=</span> <span class="token regex">/(Android)/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//安卓终端</span><span class="token keyword">let</span> url <span class="token operator">=</span> isAnd <span class="token operator">?</span>           <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">'entryUrl'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                    <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>分析:</strong></p><ul><li>我这里进入web-view的地址是<code>https://dev.xxx.com?openId=xxx&amp;token=xxxx</code> </li><li>然后进入默认路由页面url已经变成<code>https://dev.xxx.com/workbench?appkey=xxx</code></li></ul><p>SPA 的router路由机制,在安卓和ios的不同, jssdk url签名的<br>ios只认第一次的路由，我只需要传第一次路由给后端就行</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSSDK </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用的指令和问题处理</title>
      <link href="/git-chang-yong-dao-de-zhi-ling.html"/>
      <url>/git-chang-yong-dao-de-zhi-ling.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、开发时常用的指令"><a href="#一、开发时常用的指令" class="headerlink" title="一、开发时常用的指令"></a>一、开发时常用的指令</h4><h6 id="1-github配置-ssh-key配置"><a href="#1-github配置-ssh-key配置" class="headerlink" title="1. github配置 ssh key配置"></a>1. github配置 ssh key配置</h6><p><code>cd  ~/.ssh</code> 查看是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。</p><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 一路回车.<br>登录github。打开setting-&gt;SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中</p><h6 id="2-git常用命令"><a href="#2-git常用命令" class="headerlink" title="2. git常用命令"></a>2. git常用命令</h6><p><code>git branch -a</code> //显示分支一览表，同时确认当前所在的分支<br><code>git checkout -b aaa</code> //创建名为aaa的分支，并且切换到aaa分支  //创建名为aaa的分支<br><code>git checkout aaa</code> // 切换到aaa分支<br><code>git checkout -</code> //切换到上一分支</p><p>本地代码修改了，需要提交到另外一个未建新分支<br><code>git checkout -b newBranch</code> // 直接在本地新建<br><code>git push origin newBranch</code> // add&amp;&amp;commit后，直接推送该分支</p><p>同步远程分支列表（如：本地缺少分支，远程上有新分支添加’updateBranch’）<br><code>git branch -a</code> // 查看本地和远程的分支<br><code>git remote update origin --prune</code> // 更新本地分支列表。<br><code>git checkout updateBranch</code>  // 直接切换到该新分支updateBranch</p><p>不小心commit了一个不应该commit的修改，但是还没有push，想回滚那个commit.<br>命令：<br><code>git log</code> // 查看提交日志 复制下commit_id<br><code>git reset --hard commit_id</code> // 回滚 </p><p>查看更改的记录(后面可以加具体的文件名)<br><code>git diff</code></p><p>合并本地 分支代码<br><code>git merge test</code>    // test为合并进来的分支</p><p>远程仓库查看<br><code>git remote -v</code></p><p>添加远程仓库<br><code>git remote add upstream https://github.com/xxxxx/kts-portal.git</code></p><p>重置远程仓库路径<br><code>git remote set-url upstream https://github.com/xxxxxx/SpringBoot.git</code></p><p>更新远程分支列表<br><code>git remote update origin --prune</code><br><code>git remote update origin -p</code></p><p>拉取远程某个分支<br><code>git pull upstream dev</code></p><h6 id="3-commit-提交类型规范"><a href="#3-commit-提交类型规范" class="headerlink" title="3. commit 提交类型规范"></a>3. commit 提交类型规范</h6><p>用于说明 commit 的类别，只允许使用下面7个标识。</p><ul><li><p>feat：新功能（feature）</p></li><li><p>fix：修补bug</p></li><li><p>docs：文档（documentation）</p></li><li><p>style： 格式（不影响代码运行的变动）</p></li><li><p>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</p></li><li><p>test：增加测试</p></li><li><p>chore：构建过程或辅助工具的变动</p></li></ul><h6 id="4-tag-使用"><a href="#4-tag-使用" class="headerlink" title="4. tag 使用"></a>4. tag 使用</h6><p>我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的。</p><ul><li>创建tag  <code>git tag &lt;name&gt;</code><pre><code>$ git tag v1.0 -m&quot;备注&quot;  // 默认最近一次提交的commit$ git tag v1.0 &lt;commitID&gt; -m&quot;备注&quot; // 提交过的历史 打tag，找出对应的commit id</code></pre></li><li>查看tag <code>git tag</code> </li><li>提交 <pre><code>$ git push origin --tags</code></pre></li><li>tag覆盖<pre><code>$ git tag -d V1.0$ git push origin --tags</code></pre></li></ul><h4 id="二、开发应用中出现的问题-解决"><a href="#二、开发应用中出现的问题-解决" class="headerlink" title="二、开发应用中出现的问题 解决"></a>二、开发应用中出现的问题 解决</h4><h5 id="1、Failed-to-connect-to-github-com-port-443-connection-timed-out-或-fatal-unable-to-access-39-https-github-com-xxxx-39-gnutls-handshake-failed-The-TLS-connection-was-non-properly-terminated"><a href="#1、Failed-to-connect-to-github-com-port-443-connection-timed-out-或-fatal-unable-to-access-39-https-github-com-xxxx-39-gnutls-handshake-failed-The-TLS-connection-was-non-properly-terminated" class="headerlink" title="1、Failed to connect to github.com port 443:connection timed out 或 fatal: unable to access &#39;https://github.com/xxxx&#39;: gnutls_handshake() failed: The TLS connection was non-properly terminated"></a>1、<code>Failed to connect to github.com port 443:connection timed out</code> 或 <code>fatal: unable to access &#39;https://github.com/xxxx&#39;: gnutls_handshake() failed: The TLS connection was non-properly terminated</code></h5><p>由于代理设置有错，为 http 错误配置了 https 的代理，导致出错。<br>设置如下：</p><pre class=" language-cmd"><code class="language-cmd">git config --global http.proxy http://127.0.0.1:1080git config --global http.proxy https://127.0.0.1:1080git config --global --unset http.proxygit config --global --unset https.proxy</code></pre><p>还不行，有可能是dns解析出错，修改hosts文件。liunx所在路径:<code>/etc/hosts</code>  ，windows所在路径:<code>C:\Windows\System32\drivers\etc</code></p><pre class=" language-cmd"><code class="language-cmd">192.30.255.112 github.com git185.31.16.184 github.global.ssl.fastly.net</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数组中的某对象排序</title>
      <link href="/shu-zu-zhong-de-mou-dui-xiang-pai-xu.html"/>
      <url>/shu-zu-zhong-de-mou-dui-xiang-pai-xu.html</url>
      
        <content type="html"><![CDATA[<h6 id="利用sort方法排序"><a href="#利用sort方法排序" class="headerlink" title="利用sort方法排序"></a>利用sort方法排序</h6><p>例子: 对一组数组中的年龄排序.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zopp'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'gpp'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'yjj'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 降序</span><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打乱数组顺序</span><span class="token keyword">function</span> <span class="token function">disrupt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果,:</p><pre><code>[    {name:&#39;zopp&#39;,age:0},    {name:&#39;yjj&#39;,age:8}    {name:&#39;gpp&#39;,age:18},];</code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node版本升级管理</title>
      <link href="/ode-ban-ben-sheng-ji-guan-li.html"/>
      <url>/ode-ban-ben-sheng-ji-guan-li.html</url>
      
        <content type="html"><![CDATA[<h5 id="升级或降级node-网上找了一大堆的资料-看着头皮发麻-只需两行代码的事情"><a href="#升级或降级node-网上找了一大堆的资料-看着头皮发麻-只需两行代码的事情" class="headerlink" title="升级或降级node,网上找了一大堆的资料,看着头皮发麻,只需两行代码的事情"></a>升级或降级node,网上找了一大堆的资料,看着头皮发麻,只需两行代码的事情</h5><pre><code>    1. sudo npm install -g n  // 安装    2. sudo n v9.10.0  // 升级到某个版本  如:v9.10.0    3. sudo n stable   // 升级到最稳当版本</code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建发布NPM包?</title>
      <link href="/chuang-jian-fa-bu-npm-bao.html"/>
      <url>/chuang-jian-fa-bu-npm-bao.html</url>
      
        <content type="html"><![CDATA[<h6 id="前言-平时我们都是使用的别人写好的npm包-npm-i-xxx-就直接安装好了使用-本文章介绍的是如何创建自己的封装好的npm包发布。"><a href="#前言-平时我们都是使用的别人写好的npm包-npm-i-xxx-就直接安装好了使用-本文章介绍的是如何创建自己的封装好的npm包发布。" class="headerlink" title="前言: 平时我们都是使用的别人写好的npm包, npm i xxx ,就直接安装好了使用,本文章介绍的是如何创建自己的封装好的npm包发布。"></a>前言: 平时我们都是使用的别人写好的npm包, npm i xxx ,就直接安装好了使用,本文章介绍的是如何创建自己的封装好的npm包发布。</h6><ol><li><p>npm官网创建npm账户<br>npm网站地址：<code>https://www.npmjs.com/</code></p></li><li><p>命令行工具登录npm<br> <code>npm login</code></p><p> 验证登录是否成功<br> <code>npm who am i</code>如果成功会输入你npm个人信息</p><p> 内镜检测:<br> <code>npm config get registry</code> 如果输出 <code>http://registry.npmjs.org</code>就配置正确,<br> 否则要设置镜像<code>npm config set registry http://registry.npmjs.org</code></p></li><li><p>创建npm库<br><code>npm init</code><br>接下来就是一长串表单：</p><ul><li>name：填写你这个包的名字，默认是你这个文件夹的名字。不过这里要着重说一下，最好先去npm上找一下有没有同名的包。最好的测试方式就是，在命令行里面输入npm install 你要取的名字，如果报错，那么很好，npm上没有跟你同名的包，你可以放心大胆地把包发布出去。如果成功下载下来了。。。那么很不幸，改名字吧。。。</li><li>version：你这个包的版本，默认是1.0.0</li><li>description：其实我也不知道是什么，按回车就好了。。。，这个用一句话描述你的包是干嘛用的，比如我就直接：‘a plugin for express.register routes base on file path’</li><li>entry point：入口文件，默认是Index.js，你也可以自己填写你自己的文件名</li><li>test command：测试命令，这个直接回车就好了，因为目前还不需要这个。</li><li>git repository：这个是git仓库地址，如果你的包是先放到github上或者其他git仓库里，这时候你的文件夹里面会存在一个隐藏的.git目录，npm会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。</li><li>keyword：这个是一个重点，这个关系到有多少人会搜到你的npm包。尽量使用贴切的关键字作为这个包的索引。我这个包嘛，第一是在express下工作的，然后又是一个插件plugin，然后又是一个注册路由route用的，而这个路由又是基于文件目录dir，所以很好就得出我的包的索引关键字。</li><li>author：写你的账号或者你的github账号吧</li><li>license：这个直接回车，开源文件来着。。。<br>然后它就会问你Are you ok? 直接回车<br>最后生成package.json</li></ul></li><li><p>同级目录下新建index.js并编写内容</p><pre class=" language-JavaScript"><code class="language-JavaScript">exports.sayHello=function(){　　　　return "Hello.";};</code></pre></li><li><p>发布npm包<br> <code>npm publish</code>发布完成会提示<br><img src="/images/pasted-17.png" alt="upload successful"></p></li><li><p>验证是否发布成功<br> <code>npm install xxx包</code></p></li></ol><p><img src="/images/pasted-18.png" alt="upload successful"></p><ol start="7"><li>更新版本<br><code>npm version &lt;update_type&gt; -m &quot;&lt;message&gt;&quot;</code><br>其中update_type 有三种：<br>patch增加一位补丁号（比如 1.1.1 -&gt; 1.1.2）<br>minor增加一位小版本号（比如 1.1.1 -&gt; 1.2.0）<br>major增加一位大版本号（比如 1.1.1 -&gt; 2.0.0）<br>比如：<br><code>npm version patch -m &quot;Version %s - v1.0.2&quot;</code><br>最后提交更新的版本：<br><code>npm publish</code></li><li>撤销自己发布的版本。这只是一个测试的包，最好当然还是撤销下来<br><code>npm --force unpublish test_npm</code></li></ol><font color="red">注:  删除要用force强制删除。超过24小时就不能删除了</font>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建npm包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS如何优雅的写判断语句(二)</title>
      <link href="/js-ru-he-you-ya-de-xie-pan-duan-yu-ju-er.html"/>
      <url>/js-ru-he-you-ya-de-xie-pan-duan-yu-ju-er.html</url>
      
        <content type="html"><![CDATA[<p>1.多重判断时使用 Array.includes<br>2.更少的嵌套，尽早 return<br>3.使用默认参数和解构<br>4.倾向于遍历对象而不是 Switch 语句<br>5.对 所有/部分 判断使用 Array.every &amp; Array.some</p><h5 id="1-多重判断时使用-Array-includes"><a href="#1-多重判断时使用-Array-includes" class="headerlink" title="1.多重判断时使用 Array.includes"></a>1.多重判断时使用 Array.includes</h5><p>例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">==</span> <span class="token string">'apple'</span> <span class="token operator">||</span> fruit <span class="token operator">==</span> <span class="token string">'strawberry'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>用 Array.includes (Array.includes)重写条件语句</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>把条件放入数组,利用includes判断,这样一来，代码看起来更整洁</p><h5 id="2-更少的嵌套，尽早-Return"><a href="#2-更少的嵌套，尽早-Return" class="headerlink" title="2.更少的嵌套，尽早 Return"></a>2.更少的嵌套，尽早 Return</h5><p>例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 1: fruit 必须有值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件 2: 必须是red的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 条件 3: quantity大于10</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'big quantity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No fruit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试结果</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error: No fruits</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// print: red</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// print: red, big quantity</span></code></pre><p>当发现无效语句时，尽早Return,少嵌套</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 1: 尽早抛出错误</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fruit<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No fruit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 2: 当水果不是红色时停止继续执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 3: 必须是大质量的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'big quantity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-使用默认参数和解构"><a href="#3-使用默认参数和解构" class="headerlink" title="3.使用默认参数和解构"></a>3.使用默认参数和解构</h5><p>需要检查 null / undefined的值和指定默认值,例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fruit是一个对象{name: 'xx'} , quantity数量设置默认值为 1</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 quantity 参数没有传入，设置默认值为 1</span>  <span class="token keyword">const</span> q <span class="token operator">=</span> quantity <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当值存在时打印 fruit 的值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">&amp;&amp;</span> fruit<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`We have </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>quantity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fruit<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用默认参数和解构 代替</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fruit是一个对象{name: 'xx'} , quantity数量</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> quantity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>name <span class="token operator">||</span> <span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-倾向于对象遍历而不是if-else-Switch语句"><a href="#4-倾向于对象遍历而不是if-else-Switch语句" class="headerlink" title="4.倾向于对象遍历而不是if/else Switch语句"></a>4.倾向于对象遍历而不是if/else Switch语句</h5><p>利用对象代替,可以参考上一篇文章</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fruitColor <span class="token operator">=</span> <span class="token punctuation">{</span>  red<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  yellow<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pineapple'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  purple<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'plum'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fruitColor<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="5-对-所有-部分-判断使用Array-every-amp-Array-some"><a href="#5-对-所有-部分-判断使用Array-every-amp-Array-some" class="headerlink" title="5.对 所有/部分 判断使用Array.every &amp; Array.some"></a>5.对 所有/部分 判断使用Array.every &amp; Array.some</h5><p>es6中every,当数组中的数据必须每个满足条件返回true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> computers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Apple"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"IBM"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Acer"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>computers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>computers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>some,当数组中只要一条数据满足条件,就返回true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> computers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Apple"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"IBM"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Acer"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>computers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>computers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS如何优雅的写判断语句(一)</title>
      <link href="/js-ru-he-you-ya-de-xie-pan-duan-yu-ju.html"/>
      <url>/js-ru-he-you-ya-de-xie-pan-duan-yu-ju.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-复杂判断优雅写法"><a href="#一-复杂判断优雅写法" class="headerlink" title="一.复杂判断优雅写法"></a>一.复杂判断优雅写法</h2><p>前言:js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂。</p><h3 id="1-1-一元条件判断"><a href="#1-1-一元条件判断" class="headerlink" title="1.1 一元条件判断"></a>1.1 一元条件判断</h3><h4 id="一般的写法-if-else-或者-switch"><a href="#一般的写法-if-else-或者-switch" class="headerlink" title="一般的写法 if/else 或者 switch"></a>一般的写法 if/else 或者 switch</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} status 活动状态：1 开团进行 2 开团失败 3 商品售罄 4 开团成功 5 系统取消 */</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'processing'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'IndexPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'SuccessPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'cancel'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'CancelPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'other'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化方法一,将判断条件作为对象的属性名，将处理逻辑作为对象的属性值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'processing'</span><span class="token punctuation">,</span> <span class="token string">'IndexPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'SuccessPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'cancel'</span><span class="token punctuation">,</span> <span class="token string">'CancelPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span> <span class="token string">'Index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">||</span> actions<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">let</span> logName <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">let</span> pageName <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">sendLog</span><span class="token punctuation">(</span>logName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">jumpTo</span><span class="token punctuation">(</span>pageName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优化方法二,es6里的Map对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'processing'</span><span class="token punctuation">,</span> <span class="token string">'IndexPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'SuccessPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'cancel'</span><span class="token punctuation">,</span> <span class="token string">'CancelPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span> <span class="token string">'Index'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action<span class="token operator">=</span>actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token operator">||</span>actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">sendLog</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-多条件同时判断"><a href="#1-2-多条件同时判断" class="headerlink" title="1.2 多条件同时判断"></a>1.2 多条件同时判断</h3><h4 id="多条件普通写法-if-else"><a href="#多条件普通写法-if-else" class="headerlink" title="多条件普通写法 if/else"></a>多条件普通写法 if/else</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">,</span> identity<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>identity <span class="token operator">==</span> <span class="token string">'guest'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>identity <span class="token operator">==</span> <span class="token string">'master'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化写法一: 利用对象object 或者 map</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用object对象 字符串拼接</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'guest_1'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'guest_2'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//....</span><span class="token punctuation">}</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`$ {identity}_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">||</span> actions<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     action<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用map对象 字符串拼接</span><span class="token keyword">const</span> actions<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'guest_1'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'guest_2'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'master_1'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'master_2'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$ {identity}_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     action<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不拼接<br>优化方法二: 用Map对象，以Object对象作为key</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">{</span>identity<span class="token punctuation">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span>status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>identity<span class="token punctuation">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>actions<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>identity <span class="token operator">==</span> identity <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>status <span class="token operator">==</span> status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">注意:</font> 不能直接<code>actions.get({identity: &#39;guest&#39;,status: 1}).call(this)</code>调用 会报错,因为{identity: ‘guest’,status: 1},和map中定义的不是指的同一个对象地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> js优化 </tag>
            
            <tag> map对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input只能输入数字并限制长度</title>
      <link href="/input-zhi-neng-shu-ru-shu-zi-bing-xian-zhi-chang-du.html"/>
      <url>/input-zhi-neng-shu-ru-shu-zi-bing-xian-zhi-chang-du.html</url>
      
        <content type="html"><![CDATA[<h5 id="随笔记录"><a href="#随笔记录" class="headerlink" title="随笔记录"></a>随笔记录</h5><p>情景:要求只能输入数字,且限制长度,在谷歌浏览器移除input[number]的上下箭头样式</p><p><code>&lt;input type=&quot;text&quot;  maxlength=&quot;5&quot; /&gt;</code>  效果ok，当 <code>&lt;input type=&quot;number&quot;  maxlength=&quot;5&quot; /&gt;</code>时maxlength失效，长度可以无限输入 </p><p>解决参考代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">/*在chrome下移除input[number]的上下箭头*/</span>input<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>outer<span class="token operator">-</span>spin<span class="token operator">-</span>button<span class="token punctuation">,</span>input<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>inner<span class="token operator">-</span>spin<span class="token operator">-</span>button<span class="token punctuation">{</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>appearance<span class="token punctuation">:</span> none <span class="token operator">!</span>important<span class="token punctuation">;</span>    margin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*在firefox下移除input[number]的上下箭头*/</span>input<span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">"number"</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span>moz<span class="token operator">-</span>appearance<span class="token punctuation">:</span>textfield<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"number"</span> oninput<span class="token operator">=</span><span class="token string">"if(value.length>5)value=value.slice(0,5)"</span><span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> htm5 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&amp;&amp; || 运算</title>
      <link href="/yun-suan.html"/>
      <url>/yun-suan.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token string">"0"</span> <span class="token comment" spellcheck="true">// true </span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token string">"string"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token string">""</span> <span class="token comment" spellcheck="true">// false </span><span class="token keyword">null</span> <span class="token comment" spellcheck="true">// false </span><span class="token number">NaN</span> <span class="token comment" spellcheck="true">// false </span></code></pre><h2 id="1-amp-amp"><a href="#1-amp-amp" class="headerlink" title="1.&amp;&amp;"></a>1.&amp;&amp;</h2><blockquote><p>Boolean判断，遇到假的值，返回该假值，停止后面判断。 </p></blockquote><blockquote><p>全为真的值，返回最后一个值。 </p></blockquote><blockquote><p>返回第一个遇到的假值。没有假值，返回最后一个真值 </p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 举例 </span> <span class="token string">'s'</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//结果：0  's','0'为真，计算到 0，值为假。返回该值，停止比较 </span><span class="token comment" spellcheck="true">//  全真 </span><span class="token string">'s'</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'123'</span> <span class="token comment" spellcheck="true">// 123  </span></code></pre><h3 id="2"><a href="#2" class="headerlink" title="2.||"></a>2.||</h3><blockquote><p>Boolean判断，返回第一个真的值，停止后面判断。 </p></blockquote><blockquote><p>全假值，返回最后一个值。 </p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'s'</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">'0'</span> <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 's' </span><span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">'0'</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// '0' </span><span class="token comment" spellcheck="true">// 全假 </span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">null</span> </code></pre><h2 id="3-amp-amp-优先级高，先算-amp-amp-再"><a href="#3-amp-amp-优先级高，先算-amp-amp-再" class="headerlink" title="3.&amp;&amp;优先级高，先算&amp;&amp; 再 ||"></a>3.&amp;&amp;优先级高，先算&amp;&amp; 再 ||</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token string">''</span><span class="token operator">||</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token number">3</span><span class="token operator">||</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// 先计算 4&amp;&amp;5&amp;&amp;0 => 0 </span><span class="token string">''</span><span class="token operator">||</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token number">3</span><span class="token operator">||</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// 遇到第一个真值3 返回 </span><span class="token number">3</span>  <span class="token comment" spellcheck="true">//结果 </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> &amp;&amp; </tag>
            
            <tag> || </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期(v16.3 之前版本)</title>
      <link href="/react-xin-jiu-sheng-ming-zhou-qi-dui-bi-v16-3.html"/>
      <url>/react-xin-jiu-sheng-ming-zhou-qi-dui-bi-v16-3.html</url>
      
        <content type="html"><![CDATA[<p>生命周期对react非常重要,对很多新手来说,搞不懂哪个阶段该做什么事情,迷茫,乱用函数,导致性能下降,死循环.<br>  文章主要记录了react平时常用的生命周期函数,及平时开发遇到的注意事项,自从react v16.3更新后,其生命周期还是发生很大的改变, 这里介绍v16.3之前的版本</p><h2 id="React-生命周期主要包括三个阶段："><a href="#React-生命周期主要包括三个阶段：" class="headerlink" title="React 生命周期主要包括三个阶段："></a>React 生命周期主要包括三个阶段：</h2><h3 id="1-初始化阶段"><a href="#1-初始化阶段" class="headerlink" title="1. 初始化阶段"></a>1. 初始化阶段</h3><h3 id="2-运行中阶段"><a href="#2-运行中阶段" class="headerlink" title="2. 运行中阶段"></a>2. 运行中阶段</h3><h3 id="3-销毁阶段"><a href="#3-销毁阶段" class="headerlink" title="3. 销毁阶段"></a>3. 销毁阶段</h3><p>(注:结合图来看文章有助理解)<br><img src="/images/react-life-cycle/old-life.png" alt></p><h3 id="1-初始化阶段-1"><a href="#1-初始化阶段-1" class="headerlink" title="1. 初始化阶段"></a>1. 初始化阶段</h3><h4 id="1-1-设置组件默认属性"><a href="#1-1-设置组件默认属性" class="headerlink" title="1-1.设置组件默认属性"></a>1-1.设置组件默认属性</h4><p>方法一 挂载组件的时候设置 props(比较常用)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Hello data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>方法二 defaultProps<br>在组件内部定义,此方法编译才生效,es6 会报错,使用es7以上(<a href="https://blog.csdn.net/lfcss/article/details/79627646" target="_blank">详情</a>)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><p>在组件外部属性定义</p><pre class=" language-javascript"><code class="language-javascript">Greeting<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'我是props的默认值！'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Greeting <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-组件的初始化状态-state"><a href="#1-2-组件的初始化状态-state" class="headerlink" title="1-2.组件的初始化状态 state"></a>1-2.组件的初始化状态 state</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不加super()，导致了this的 Reference Error</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。<br>super(props):传递props作为super()的参数，那就是你需要在构造函数内使用this.props</p><h4 id="1-3-componentWillMount"><a href="#1-3-componentWillMount" class="headerlink" title="1-3.componentWillMount"></a>1-3.componentWillMount</h4><p>因为componentWillMount是在render之前执行，所以在这个方法中setState不会发生重新渲染(re-render),通常情况下，推荐用constructor()方法代替.<br>提示: 很多时候喜欢这里去做一些初始化数据的请求,你会发现数据还没请求到就渲染render()了,当请求到数据后setState再渲染出数据.依然重复渲染. 建议初始化数据都在componentDidMount()中使用,新版本将去掉这个函数.</p><h4 id="1-4-render"><a href="#1-4-render" class="headerlink" title="1-4.render"></a>1-4.render</h4><p>该方法会创建一个虚拟DOM，用来表示组件的输出。对于一个组件来讲，render方法是唯一一个必需的方法。render方法需要满足下面几点：</p><ol><li>只能通过 this.props 和 this.state 访问数据（不能修改）</li><li>可以返回 null,false 或者任何React组件</li><li>只能出现一个顶级组件，不能返回一组元素</li><li>不能改变组件的状态</li><li>不能修改DOM的输出<br>render方法返回的结果并不是真正的DOM元素，而是一个虚拟的表现，类似于一个DOM tree的结构的对象。</li></ol><h5 id="1-5-componentDidMount"><a href="#1-5-componentDidMount" class="headerlink" title="1-5. componentDidMount"></a>1-5. componentDidMount</h5><p>一般情况在这里做初始化异步数据请求</p><ol><li>这个方法会在render()之后立即执行；</li><li>这里可以对DOM进行操作，这个函数之后ref变成实际的DOM</li></ol><h4 id="2-组件运行阶段"><a href="#2-组件运行阶段" class="headerlink" title="2. 组件运行阶段"></a>2. 组件运行阶段</h4><p>此时组件已经渲染好并且用户可以与它进行交互，比如鼠标点击，手指点按，或者其它的一些事件，导致应用状态的改变，你将会看到下面的方法依次被调用<br>2-1.componentWillReceiveProps<br>组件的 props 属性可以通过父组件来更改，这时，componentWillReceiveProps 将来被调用。可以在这个方法里更新 state,以触发 render 方法重新渲染组件。</p><pre class=" language-javascript"><code class="language-javascript">componentWillReceiveProps<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>checked <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            checked<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>checked        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2-2.shouldComponentUpdate(nextProps, nextState)<br>在接收新的props或state时确定是否发生重新渲染，默认情况返回true，表示会发生重新渲染<br>注意</p><ol><li>这个方法在首次渲染时或者forceUpdate()时不会触发;</li><li>这个方法如果返回false, 那么props或state发生改变的时候会阻止子组件发生重新渲染;</li><li>目前，如果返回false, 那么componentWillUpdate(nextProps, nextState), render(), componentDidUpdate()都不会被触发;</li></ol><p>2-3.componentWillUpdate<br>在props或state发生改变或者shouldComponentUpdate(nextProps, nextState)触发后, 在render()之前.<br>千万不要在这个函数中调用this.setState()方法,死循环.结合图表看.<br>2-4.render<br>同上 1-4<br>2-5.componentDidUpdate(object prevProps, object prevState)<br>这个方法和 componentDidMount 类似</p><h3 id="3-componentWillUnmount"><a href="#3-componentWillUnmount" class="headerlink" title="3.componentWillUnmount"></a>3.componentWillUnmount</h3><p>组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器， 关闭抽屉弹框，取消Redux的订阅事件等等.</p><h2 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h2><p><strong><em>生命周期实例 <a href="https://codesandbox.io/s/q69zyw324" target="_blank">demo</a></em></strong><br><img src="/images/react-life-cycle/old-life-compare.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中箭头函数和function的区别</title>
      <link href="/es6-zhong-jian-tou-han-shu-he-function-de-qu-bie.html"/>
      <url>/es6-zhong-jian-tou-han-shu-he-function-de-qu-bie.html</url>
      
        <content type="html"><![CDATA[<h2 id="箭头函数和function的区别总结"><a href="#箭头函数和function的区别总结" class="headerlink" title="箭头函数和function的区别总结"></a>箭头函数和function的区别总结</h2><h4 id="1-箭头函数与function定义函数的写法"><a href="#1-箭头函数与function定义函数的写法" class="headerlink" title="1.箭头函数与function定义函数的写法"></a>1.箭头函数与function定义函数的写法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//function   </span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 箭头函数</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="2-this的指向"><a href="#2-this的指向" class="headerlink" title="2.this的指向"></a>2.this的指向</h4><p>1.使用function定义的函数，this的指向随着调用环境的变化而变化的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用function定义的函数</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> aa<span class="token punctuation">:</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span>obj<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//obj { aa: foo }</span></code></pre><p>2.而箭头函数中的this指向是固定不变的，一直指向的是定义它的环境，最近的作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用箭头函数定义函数</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> aa<span class="token punctuation">:</span>foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span>obj<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined  原因:箭头函数中的this并不是指向a这个对象。对象a并不能构成一个作用域，所以再往上到达全局作用域，this就指向全局作用域,这里this指向Window。</span></code></pre><h4 id="3-构造函数"><a href="#3-构造函数" class="headerlink" title="3.构造函数"></a>3.构造函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用function方法定义构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> lenhart <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>lenhart<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lenhart<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{name: 'lenhart', age: 25}</span></code></pre><p>function是可以定义构造函数的，而箭头函数是不行的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//尝试使用箭头函数</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> lenhart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'lenhart'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: Person is not a constructor</span></code></pre><h4 id="4-变量提升"><a href="#4-变量提升" class="headerlink" title="4.变量提升"></a>4.变量提升</h4><p>由于js的内存机制，function的级别最高，而用箭头函数定义函数的时候，需要var(let const定义的时候更不必说)关键词，而var所定义的变量不能得到变量提升，故箭头函数一定要定义于调用之前！</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">arrowFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: arrowFn is not a function</span><span class="token keyword">var</span> arrowFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 箭头函数this </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 搭建和配置</title>
      <link href="/nginx-da-jian-he-pei-zhi.html"/>
      <url>/nginx-da-jian-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<p>本文章适合新手,其中含有我在实际中遇到的问题解决分享,服务器在<a href="https://www.bwh8.net" target="_blank">搬瓦工</a>租的,不多废话直接上干货</p><hr><h4 id="一、Ubuntu环境："><a href="#一、Ubuntu环境：" class="headerlink" title="一、Ubuntu环境："></a>一、Ubuntu环境：</h4><ul><li>操作系统：Ubuntu 18.04.4</li></ul><hr><h3 id="Nginx搭建"><a href="#Nginx搭建" class="headerlink" title="Nginx搭建"></a>Nginx搭建</h3><h5 id="1-安装-nginx"><a href="#1-安装-nginx" class="headerlink" title="1.安装 nginx"></a>1.安装 nginx</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> nginxnginx -v</code></pre><h6 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span><span class="token function">service</span> nginx start<span class="token comment" spellcheck="true"># 停止</span><span class="token function">service</span> nginx stop<span class="token comment" spellcheck="true"># 重起</span><span class="token function">service</span> nginx restart</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nginx</code></pre><p>nginx.conf 文件，路径为：/etc/nginx/nginx.conf<br>常规配置如下：</p><pre class=" language-bash"><code class="language-bash">worker_processes  1<span class="token punctuation">;</span>events <span class="token punctuation">{</span>  worker_connections  1024<span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>  include   mime.types<span class="token punctuation">;</span>  default_type  application/octet-stream<span class="token punctuation">;</span>  sendfile  on<span class="token punctuation">;</span>  keepalive_timeout 65<span class="token punctuation">;</span>  <span class="token function">gzip</span>  on<span class="token punctuation">;</span>  gzip_vary on<span class="token punctuation">;</span>  gzip_comp_level 6<span class="token punctuation">;</span>  gzip_buffers 16 8k<span class="token punctuation">;</span>  gzip_min_length 1000<span class="token punctuation">;</span>  gzip_proxied any<span class="token punctuation">;</span>  gzip_disable <span class="token string">"msie6"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#gzip_http_version 1.0;</span>  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript<span class="token punctuation">;</span>  server <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#error_page 404 /404.html;</span>    error_page  500 502 503 504 /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>      root html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    listen 80<span class="token punctuation">;</span>    server_name localhost<span class="token punctuation">;</span>    location ~ .*\.<span class="token punctuation">(</span>css<span class="token operator">|</span>js<span class="token operator">|</span>swf<span class="token operator">|</span>html<span class="token operator">|</span>htm<span class="token operator">|</span>pdf<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>      root /var/www/html<span class="token punctuation">;</span>      autoindex on<span class="token punctuation">;</span>      index index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location / <span class="token punctuation">{</span>      charset utf-8<span class="token punctuation">;</span>      root  /var/www/html<span class="token punctuation">;</span>      index index.html index.htm<span class="token punctuation">;</span>      try_files <span class="token variable">$uri</span> /index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>default 服务主机配置文件，路径为：/etc/nginx/sites-available/default</p><p>默认页面index.html路径：     /var/www/html</p><hr><h4 id="二、CenOS环境："><a href="#二、CenOS环境：" class="headerlink" title="二、CenOS环境："></a>二、CenOS环境：</h4><ul><li>操作系统：CenOS 6 x86</li><li>Nginx 版本：1.14.0</li></ul><hr><h3 id="Nginx搭建-1"><a href="#Nginx搭建-1" class="headerlink" title="Nginx搭建"></a>Nginx搭建</h3><h5 id="1-第一步-创建源配置"><a href="#1-第一步-创建源配置" class="headerlink" title="1.第一步 创建源配置"></a>1.第一步 创建源配置</h5><p>在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/yum.repos.d/vim nginx.repo</code></pre><p>填写如下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>nginx<span class="token punctuation">]</span>name<span class="token operator">=</span>nginx repobaseurl<span class="token operator">=</span>http://nginx.org/packages/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>0enabled<span class="token operator">=</span>1</code></pre><p>保存，则会产生一个/etc/yum.repos.d/nginx.repo文件。</p><h5 id="2-第二步-安装"><a href="#2-第二步-安装" class="headerlink" title="2.第二步 安装"></a>2.第二步 安装</h5><p>直接执行如下指令即可自动安装好Nginx：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> nginx -y</code></pre><p>安装完成，下面直接就可以启动Nginx了：</p><pre class=" language-bash"><code class="language-bash">/etc/init.d/nginx start</code></pre><p>现在Nginx已经启动了，直接访问服务器就能看到Nginx欢迎页面了的。<br>如果还无法访问:<br>方法一:查看下服务器上端口是否80(阿里云上<a href="https://jingyan.baidu.com/article/03b2f78c31bdea5ea237ae88.html" target="_blank">配下80端口</a>)。<br>方法二:需配置一下Linux防火墙,以此执行如下命令:</p><pre class=" language-bash"><code class="language-bash">iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT<span class="token function">service</span> iptables save<span class="token function">service</span> iptables restart</code></pre><p>Nginx的相关命令：</p><pre class=" language-bash"><code class="language-bash">/etc/init.d/nginx start <span class="token comment" spellcheck="true"># 启动Nginx服务</span>/etc/init.d/nginx stop <span class="token comment" spellcheck="true"># 停止Nginx服务</span>/etc/nginx/nginx.conf <span class="token comment" spellcheck="true"># Nginx配置文件位置</span><span class="token function">chkconfig</span> nginx on    <span class="token comment" spellcheck="true">#设为开机启动</span></code></pre><h5 id="第三步-前端小优化-nginx开启gzip和缓存配置-nginx-conf"><a href="#第三步-前端小优化-nginx开启gzip和缓存配置-nginx-conf" class="headerlink" title="第三步 前端小优化 nginx开启gzip和缓存配置 (nginx.conf)"></a>第三步 前端小优化 nginx开启gzip和缓存配置 (nginx.conf)</h5><p>进入nginx 配置文件<code>vim /etc/nginx/nginx.conf</code>,添加如下配置:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启gzip</span><span class="token function">gzip</span> on<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span>gzip_min_length 1k<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span>gzip_comp_level 2<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span>gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span>gzip_vary on<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 禁用IE 6 gzip</span>gzip_disable <span class="token string">"MSIE [1-6]\."</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启缓存</span>location ~* ^.+\.<span class="token punctuation">(</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>     access_log   off<span class="token punctuation">;</span>     expires      30d<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* ^.+\.<span class="token punctuation">(</span>css<span class="token operator">|</span>js<span class="token operator">|</span>txt<span class="token operator">|</span>xml<span class="token operator">|</span>swf<span class="token operator">|</span>wav<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    access_log   off<span class="token punctuation">;</span>    expires      24h<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* ^.+\.<span class="token punctuation">(</span>html<span class="token operator">|</span>htm<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    expires      1h<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* ^.+\.<span class="token punctuation">(</span>eot<span class="token operator">|</span>ttf<span class="token operator">|</span>otf<span class="token operator">|</span>woff<span class="token operator">|</span>svg<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    access_log   off<span class="token punctuation">;</span>    expires max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 格式</span><span class="token comment" spellcheck="true"># expires 30s;</span><span class="token comment" spellcheck="true"># expires 30m;</span><span class="token comment" spellcheck="true"># expires 2h;</span><span class="token comment" spellcheck="true"># expires 30d;</span></code></pre><h5 id="相关报错问题处理"><a href="#相关报错问题处理" class="headerlink" title="相关报错问题处理"></a>相关报错问题处理</h5><p>1.vim使用报错:-bash: vim: command not found</p><p>使用命令 : <code>yum -y install vim*</code></p><p>2.解决Nginx下使用React-router(其他单页应用vue-router路由)刷新出现404问题<br>server需要重定向到index ,进入配置 <code>vim /etc/nginx/conf.d/default.conf</code></p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    server_name zlzkj.io<span class="token punctuation">;</span>    index  index.html<span class="token punctuation">;</span>    root /Volumes/Mac/www/antd-admin/<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>  //  指向index.html    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此，Nginx已经全部配置安装完成,如有问题欢迎留言或联系。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx  </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
